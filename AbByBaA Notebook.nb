(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    296513,       6159]
NotebookOptionsPosition[    289570,       6042]
NotebookOutlinePosition[    289969,       6058]
CellTagsIndexPosition[    289926,       6055]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["X act\[UAcute]a como represor y B como activador", "Title",
 CellChangeTimes->{{3.8440048952226963`*^9, 
  3.8440049057036505`*^9}},ExpressionUUID->"0fd24ee3-b46b-4df3-b199-\
dbc5dc1d126e"],

Cell[TextData[{
 "En este cuaderno complementaremos los c\[AAcute]lculos que se presentan en \
el documento. Consideremos las expresiones, \n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
\t\t",
 Cell[BoxData[
  FormBox[
   TemplateBox[Association["boxes" -> FormBox[
       RowBox[{
         SubscriptBox[
          OverscriptBox[
           RowBox[{"\[CapitalDelta]", 
             StyleBox["p", "TI"]}], "^"], "1"], "\[LongEqual]", 
         FractionBox[
          RowBox[{
            SubscriptBox[
             StyleBox["c", "TI"], "1"], 
            SubscriptBox[
             OverscriptBox[
              RowBox[{"\[CapitalDelta]", 
                StyleBox["p", "TI"]}], "^"], "2"], "+", 
            SubscriptBox[
             StyleBox["q", "TI"], 
             SubscriptBox[
              StyleBox["l", "TI"], "1"]], 
            SubscriptBox[
             OverscriptBox["\[Xi]", "^"], 
             SubscriptBox[
              StyleBox["l", "TI"], "1"]]}], 
          RowBox[{
            StyleBox["i", "TI"], "\[Omega]", "+", 
            SubscriptBox["\[Gamma]", 
             StyleBox["p", "TI"]]}]]}], TraditionalForm], "errors" -> {}, 
     "input" -> 
     "\\hat{\\Delta p}_1 = \\frac{c_1 \\hat{\\Delta p}_2 + q_{l_1} \
\\hat{\\xi}_{l_1}}{i \\omega + \\gamma_{p}}", "state" -> "Boxes"],
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "9c873d5e-271b-4972-b8ac-8836bf5fb09c"],
 "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
 Cell[BoxData[
  FormBox[
   TemplateBox[Association["boxes" -> FormBox[
       RowBox[{
         SubscriptBox[
          OverscriptBox[
           RowBox[{"\[CapitalDelta]", 
             StyleBox["p", "TI"]}], "^"], "2"], "\[LongEqual]", 
         FractionBox[
          RowBox[{"-", 
            SubscriptBox[
             StyleBox["c", "TI"], "2"], 
            SubscriptBox[
             OverscriptBox[
              RowBox[{"\[CapitalDelta]", 
                StyleBox["p", "TI"]}], "^"], "1"], "+", 
            SubscriptBox[
             StyleBox["q", "TI"], 
             SubscriptBox[
              StyleBox["l", "TI"], "2"]], 
            SubscriptBox[
             OverscriptBox["\[Xi]", "^"], 
             SubscriptBox[
              StyleBox["l", "TI"], "2"]]}], 
          RowBox[{
            StyleBox["i", "TI"], "\[Omega]", "+", 
            SubscriptBox["\[Gamma]", 
             StyleBox["p", "TI"]]}]]}], TraditionalForm], "errors" -> {}, 
     "input" -> 
     "\\hat{\\Delta p}_2= \\frac{-c_2 \\hat{\\Delta p}_1 + q_{l_2} \
\\hat{\\xi}_{l_2}}{i \\omega + \\gamma_{p}}", "state" -> "Boxes"],
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "2dd8bb3d-7700-48bf-8925-7999db10e2d0"],
 "\n"
}], "Text",
 CellChangeTimes->{{3.844004914849531*^9, 3.844004939784096*^9}, {
  3.8440049786275134`*^9, 3.844005113789772*^9}, {3.844005154303333*^9, 
  3.8440051874390335`*^9}, {3.8440052426001625`*^9, 3.844005319585266*^9}, {
  3.844005376362349*^9, 
  3.8440053854764786`*^9}},ExpressionUUID->"077c871b-b9f3-47f7-b4eb-\
20c967688e2f"],

Cell["Resolvemos el sistema de ecuaciones,", "Text",
 CellChangeTimes->{{3.8440054142614903`*^9, 
  3.844005463017375*^9}},ExpressionUUID->"9481b5f9-3180-4adf-9118-\
1a165b1d4d5d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"A", " ", "==", " ", 
       FractionBox[
        RowBox[{
         RowBox[{"c1", " ", "B"}], " ", "+", " ", 
         RowBox[{"ql1", " ", "\[Xi]l1"}]}], 
        RowBox[{
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}], " ", "+", " ", 
         "\[Gamma]p1"}]]}], ",", 
      RowBox[{"B", " ", "==", " ", 
       FractionBox[
        RowBox[{
         RowBox[{
          RowBox[{"-", "c2"}], " ", "A"}], " ", "+", " ", 
         RowBox[{"ql2", " ", "\[Xi]l2"}]}], 
        RowBox[{
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}], " ", "+", " ", 
         "\[Gamma]p2"}]]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"A", ",", "B"}], "}"}]}], "]"}], "//", "FullSimplify"}]], "Input",
 CellLabel->"In[1]:=",ExpressionUUID->"dbf00f27-9092-4dd7-9679-6bbcbc29b19a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"A", "\[Rule]", 
     FractionBox[
      RowBox[{
       RowBox[{"c1", " ", "ql2", " ", "\[Xi]l2"}], "+", 
       RowBox[{"ql1", " ", "\[Xi]l1", " ", 
        RowBox[{"(", 
         RowBox[{"\[Gamma]p2", "+", 
          RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]}], 
      RowBox[{
       RowBox[{"c1", " ", "c2"}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"\[Gamma]p1", "+", 
          RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"\[Gamma]p2", "+", 
          RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]}]]}], ",", 
    RowBox[{"B", "\[Rule]", 
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "c2"}], " ", "ql1", " ", "\[Xi]l1"}], "+", 
       RowBox[{"ql2", " ", "\[Xi]l2", " ", 
        RowBox[{"(", 
         RowBox[{"\[Gamma]p1", "+", 
          RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]}], 
      RowBox[{
       RowBox[{"c1", " ", "c2"}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"\[Gamma]p1", "+", 
          RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"\[Gamma]p2", "+", 
          RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]}]]}]}], "}"}],
   "}"}]], "Output",
 CellChangeTimes->{3.8440054715165415`*^9, 3.8440180294988785`*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"ee4ed681-9ad6-4188-beb0-e7f74ca04db3"]
}, Open  ]],

Cell[TextData[{
 "donde ",
 Cell[BoxData[
  FormBox[
   TemplateBox[Association["boxes" -> FormBox[
       RowBox[{
         SubscriptBox[
          OverscriptBox[
           RowBox[{"\[CapitalDelta]", 
             StyleBox["p", "TI"]}], "^"], "1"], "\[LongEqual]", 
         StyleBox["A", "TI"]}], TraditionalForm], "errors" -> {}, "input" -> 
     "\\hat{\\Delta{p}}_1 = A", "state" -> "Boxes"],
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "c65ab0de-b4ff-4986-a8d6-0e8fe8cf17d3"],
 " y  ",
 Cell[BoxData[
  FormBox[
   TemplateBox[Association["boxes" -> FormBox[
       RowBox[{
         SubscriptBox[
          OverscriptBox[
           RowBox[{"\[CapitalDelta]", 
             StyleBox["p", "TI"]}], "^"], "2"], "\[LongEqual]", 
         StyleBox["B", "TI"]}], TraditionalForm], "errors" -> {}, "input" -> 
     "\\hat{\\Delta{p}}_2 = B", "state" -> "Boxes"],
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "4ef2ec6e-4b12-40da-b63e-12eef6ad8c12"],
 ". "
}], "Text",
 CellChangeTimes->{{3.8440054841610155`*^9, 
  3.844005560027725*^9}},ExpressionUUID->"4ac804c4-2f87-484c-9d1d-\
152189ce37d6"],

Cell[CellGroupData[{

Cell["Consideremos inicialmente el caso de A.", "Subsection",
 CellChangeTimes->{{3.844005669665615*^9, 
  3.8440056905891223`*^9}},ExpressionUUID->"53f3f529-fe35-4752-92cb-\
44bdb0480c73"],

Cell[TextData[{
 "Inicialmente tomamos la ecuaci\[OAcute]n para A y multiplicamos por el \
complejo conjugado. Asumimos las tasas de degradaci\[OAcute]n iguales; es \
decir, ",
 Cell[BoxData[
  FormBox[
   TemplateBox[Association["boxes" -> FormBox[
       RowBox[{
         SubscriptBox["\[Gamma]", 
          SubscriptBox[
           StyleBox["p", "TI"], "1"]], "\[LongEqual]", 
         SubscriptBox["\[Gamma]", 
          SubscriptBox[
           StyleBox["p", "TI"], "2"]], "\[LongEqual]", 
         SubscriptBox["\[Gamma]", 
          StyleBox["p", "TI"]]}], TraditionalForm], "errors" -> {}, "input" -> 
     "\\gamma_{p_1} = \\gamma_{p_2} = \\gamma_p", "state" -> "Boxes"],
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "d4dcafa1-7cee-4876-9ffc-a81ddcd5fee1"],
 ". De aqu\[IAcute],"
}], "Text",
 CellChangeTimes->{{3.8440058168292212`*^9, 3.844005830242016*^9}, {
  3.8440058960510573`*^9, 
  3.844005926094885*^9}},ExpressionUUID->"a66378fd-3f6b-420d-bfe4-\
dd7b3bc887a4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p1", " ", "=", " ", 
  RowBox[{"Expand", "[", 
   FractionBox[
    RowBox[{
     RowBox[{"c1", " ", "ql2", " ", "\[Xi]l2"}], "+", 
     RowBox[{"ql1", " ", "\[Xi]l1", " ", 
      RowBox[{"(", 
       RowBox[{"\[Gamma]p", "+", 
        RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]}], 
    RowBox[{
     RowBox[{"c1", " ", "c2"}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"\[Gamma]p", "+", 
        RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"\[Gamma]p", "+", 
        RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]}]], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8440058795464506`*^9, 3.8440058836264944`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"9ae05650-0ff0-47e4-a1a6-5fdd59f9b11d"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"ql1", " ", "\[Gamma]p", " ", "\[Xi]l1"}], 
   RowBox[{
    RowBox[{"c1", " ", "c2"}], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"\[Gamma]p", "+", 
       RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}]], "+", 
  FractionBox[
   RowBox[{"c1", " ", "ql2", " ", "\[Xi]l2"}], 
   RowBox[{
    RowBox[{"c1", " ", "c2"}], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"\[Gamma]p", "+", 
       RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}]], "+", 
  FractionBox[
   RowBox[{"\[ImaginaryI]", " ", "ql1", " ", "\[Xi]l1", " ", "\[Omega]"}], 
   RowBox[{
    RowBox[{"c1", " ", "c2"}], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"\[Gamma]p", "+", 
       RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], 
     "2"]}]]}]], "Output",
 CellChangeTimes->{3.8440058392975783`*^9, 3.8440058844288025`*^9, 
  3.8440180336533585`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"6b876006-ed20-4e83-95a2-325c8fe124ac"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p2", " ", "=", " ", 
  RowBox[{"Expand", "[", 
   FractionBox[
    RowBox[{
     RowBox[{"c1", " ", "ql2", " ", 
      RowBox[{"\[Xi]l2", "'"}]}], "+", 
     RowBox[{"ql1", " ", 
      RowBox[{"\[Xi]l1", "'"}], " ", 
      RowBox[{"(", 
       RowBox[{"\[Gamma]p", "-", 
        RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]}], 
    RowBox[{
     RowBox[{"c1", " ", "c2"}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"\[Gamma]p", "-", 
        RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"\[Gamma]p", "-", 
        RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]}]], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8440058902044077`*^9, 3.8440058938271303`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"b86ee985-3f66-4731-9a40-7670a7528910"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"ql1", " ", "\[Gamma]p", " ", 
    SuperscriptBox["\[Xi]l1", "\[Prime]",
     MultilineFunction->None]}], 
   RowBox[{
    RowBox[{"c1", " ", "c2"}], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"\[Gamma]p", "-", 
       RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}]], "-", 
  FractionBox[
   RowBox[{"\[ImaginaryI]", " ", "ql1", " ", "\[Omega]", " ", 
    SuperscriptBox["\[Xi]l1", "\[Prime]",
     MultilineFunction->None]}], 
   RowBox[{
    RowBox[{"c1", " ", "c2"}], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"\[Gamma]p", "-", 
       RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}]], "+", 
  FractionBox[
   RowBox[{"c1", " ", "ql2", " ", 
    SuperscriptBox["\[Xi]l2", "\[Prime]",
     MultilineFunction->None]}], 
   RowBox[{
    RowBox[{"c1", " ", "c2"}], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"\[Gamma]p", "-", 
       RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], 
     "2"]}]]}]], "Output",
 CellChangeTimes->{3.844005847232234*^9, 3.8440058942620277`*^9, 
  3.8440180352415543`*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"a369b128-44b8-472b-965b-8163737f9790"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", " ", "=", " ", 
  RowBox[{"Expand", "[", 
   RowBox[{"p1", " ", "p2"}], "]"}]}]], "Input",
 CellLabel->"In[4]:=",ExpressionUUID->"3983a2d4-b79e-4e30-887e-ecca6b5e174d"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{
    SuperscriptBox["ql1", "2"], " ", 
    SuperscriptBox["\[Gamma]p", "2"], " ", "\[Xi]l1", " ", 
    SuperscriptBox["\[Xi]l1", "\[Prime]",
     MultilineFunction->None]}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "-", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], ")"}], 
    " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "+", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], 
     ")"}]}]], "+", 
  FractionBox[
   RowBox[{
   "c1", " ", "ql1", " ", "ql2", " ", "\[Gamma]p", " ", "\[Xi]l2", " ", 
    SuperscriptBox["\[Xi]l1", "\[Prime]",
     MultilineFunction->None]}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "-", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], ")"}], 
    " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "+", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], 
     ")"}]}]], "-", 
  FractionBox[
   RowBox[{
   "\[ImaginaryI]", " ", "c1", " ", "ql1", " ", "ql2", " ", "\[Xi]l2", " ", 
    "\[Omega]", " ", 
    SuperscriptBox["\[Xi]l1", "\[Prime]",
     MultilineFunction->None]}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "-", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], ")"}], 
    " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "+", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], 
     ")"}]}]], "+", 
  FractionBox[
   RowBox[{
    SuperscriptBox["ql1", "2"], " ", "\[Xi]l1", " ", 
    SuperscriptBox["\[Omega]", "2"], " ", 
    SuperscriptBox["\[Xi]l1", "\[Prime]",
     MultilineFunction->None]}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "-", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], ")"}], 
    " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "+", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], 
     ")"}]}]], "+", 
  FractionBox[
   RowBox[{
   "c1", " ", "ql1", " ", "ql2", " ", "\[Gamma]p", " ", "\[Xi]l1", " ", 
    SuperscriptBox["\[Xi]l2", "\[Prime]",
     MultilineFunction->None]}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "-", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], ")"}], 
    " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "+", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], 
     ")"}]}]], "+", 
  FractionBox[
   RowBox[{
    SuperscriptBox["c1", "2"], " ", 
    SuperscriptBox["ql2", "2"], " ", "\[Xi]l2", " ", 
    SuperscriptBox["\[Xi]l2", "\[Prime]",
     MultilineFunction->None]}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "-", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], ")"}], 
    " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "+", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], 
     ")"}]}]], "+", 
  FractionBox[
   RowBox[{
   "\[ImaginaryI]", " ", "c1", " ", "ql1", " ", "ql2", " ", "\[Xi]l1", " ", 
    "\[Omega]", " ", 
    SuperscriptBox["\[Xi]l2", "\[Prime]",
     MultilineFunction->None]}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "-", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], ")"}], 
    " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "+", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], 
     ")"}]}]]}]], "Output",
 CellChangeTimes->{3.844005854877001*^9, 3.84400593070407*^9, 
  3.844018036882742*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"5b9a782a-139b-413f-830e-82307d9ffe80"]
}, Open  ]],

Cell["Los t\[EAcute]rminos cruzados se van, es decir, ", "Text",
 CellChangeTimes->{{3.844005953040489*^9, 
  3.8440059774447117`*^9}},ExpressionUUID->"54ec25e1-2389-4883-aec6-\
c87a0c4aaa6c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ReplaceAll", "[", 
   RowBox[{"p", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"\[Xi]l2", " ", 
        SuperscriptBox["\[Xi]l1", "\[Prime]",
         MultilineFunction->None]}], "->", " ", "0"}], ",", 
      RowBox[{
       RowBox[{"\[Xi]l1", " ", 
        SuperscriptBox["\[Xi]l2", "\[Prime]",
         MultilineFunction->None]}], "->", " ", "0"}]}], "}"}]}], "]"}], "//",
   "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.844005980879676*^9, 3.8440059857363005`*^9}, {
  3.8440060473582306`*^9, 3.8440060502462835`*^9}, {3.844006139347762*^9, 
  3.8440061394768972`*^9}, {3.8440061720901423`*^9, 3.8440061732842865`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"590904c8-2f51-4036-b65e-ef3472ecf4ee"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{
    SuperscriptBox["ql1", "2"], " ", "\[Xi]l1", " ", 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["\[Gamma]p", "2"], "+", 
      SuperscriptBox["\[Omega]", "2"]}], ")"}], " ", 
    SuperscriptBox["\[Xi]l1", "\[Prime]",
     MultilineFunction->None]}], "+", 
   RowBox[{
    SuperscriptBox["c1", "2"], " ", 
    SuperscriptBox["ql2", "2"], " ", "\[Xi]l2", " ", 
    SuperscriptBox["\[Xi]l2", "\[Prime]",
     MultilineFunction->None]}]}], 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox["\[Gamma]p", "2"]}], ")"}], "2"], "+", 
   RowBox[{"2", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "c1"}], " ", "c2"}], "+", 
      SuperscriptBox["\[Gamma]p", "2"]}], ")"}], " ", 
    SuperscriptBox["\[Omega]", "2"]}], "+", 
   SuperscriptBox["\[Omega]", "4"]}]]], "Output",
 CellChangeTimes->{3.844005986118371*^9, 3.844006067144788*^9, 
  3.84400613978368*^9, 3.844006173519096*^9, 3.844018038665321*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"cc2d60f0-94c7-4fb9-8a68-0d68132eebbc"]
}, Open  ]],

Cell[TextData[{
 "Tomamos promedio a ambos lados. Sabemos que ",
 Cell[BoxData[
  FormBox[
   TemplateBox[Association["boxes" -> FormBox[
       RowBox[{"<", 
         OverscriptBox[
          SubscriptBox["\[Xi]", 
           SubscriptBox[
            StyleBox["l", "TI"], "1"]], "^"], 
         SuperscriptBox[
          OverscriptBox[
           SubscriptBox["\[Xi]", 
            SubscriptBox[
             StyleBox["l", "TI"], "1"]], "^"], "*"], ">", "\[LongEqual]", "<", 
         OverscriptBox[
          SubscriptBox["\[Xi]", 
           SubscriptBox[
            StyleBox["l", "TI"], "2"]], "^"], 
         SuperscriptBox[
          OverscriptBox[
           SubscriptBox["\[Xi]", 
            SubscriptBox[
             StyleBox["l", "TI"], "2"]], "^"], "*"], ">", "\[LongEqual]", 
         "1"}], TraditionalForm], "errors" -> {}, "input" -> 
     "<\\hat{\\xi_{l_1}}\\hat{\\xi_{l_1}}^{*}> = <\\hat{\\xi_{l_2}} \
\\hat{\\xi_{l_2}}^{*}> = 1", "state" -> "Boxes"],
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "1eced462-6c1c-41df-a746-e05a8c48a420"],
 "  y obtenemos que "
}], "Text",
 CellChangeTimes->{{3.8440060053689485`*^9, 3.8440060379838977`*^9}, {
  3.844006175863677*^9, 3.8440061815886908`*^9}, {3.8440062510895543`*^9, 
  3.8440062517424293`*^9}},ExpressionUUID->"a700c6b9-c792-469a-8a61-\
23d75730fddc"],

Cell[BoxData[
 RowBox[{"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", 
  FormBox[
   TemplateBox[Association["boxes" -> FormBox[
       RowBox[{
         RowBox[{"<", 
           SuperscriptBox[
            TemplateBox[{
              RowBox[{
                SubscriptBox[
                 OverscriptBox["\[CapitalDelta]", "^"], 
                 SubscriptBox[
                  StyleBox["p", "TI"], "1"]]}]}, "Abs"], "2"], ">"}], 
         "\[LongEqual]", 
         FractionBox[
          RowBox[{
            SubsuperscriptBox[
             StyleBox["c", "TI"], "1", "2"], 
            SubsuperscriptBox[
             StyleBox["q", "TI"], 
             SubscriptBox[
              StyleBox["l", "TI"], "2"], "2"], "+", 
            SubsuperscriptBox[
             StyleBox["q", "TI"], 
             SubscriptBox[
              StyleBox["l", "TI"], "1"], "2"], 
            RowBox[{"(", 
              RowBox[{
                SubsuperscriptBox["\[Gamma]", 
                 StyleBox["p", "TI"], "2"], "+", 
                SuperscriptBox["\[Omega]", "2"]}], ")"}]}], 
          RowBox[{
            SuperscriptBox[
             RowBox[{"(", 
               RowBox[{
                 SubscriptBox[
                  StyleBox["c", "TI"], "1"], 
                 SubscriptBox[
                  StyleBox["c", "TI"], "2"], "+", 
                 SubsuperscriptBox["\[Gamma]", 
                  StyleBox["p", "TI"], "2"]}], ")"}], "2"], "+", "2", 
            RowBox[{"(", 
              RowBox[{
                SubsuperscriptBox["\[Gamma]", 
                 StyleBox["p", "TI"], "2"], "-", 
                SubscriptBox[
                 StyleBox["c", "TI"], "1"], 
                SubscriptBox[
                 StyleBox["c", "TI"], "2"]}], ")"}], 
            SuperscriptBox["\[Omega]", "2"], "+", 
            SuperscriptBox["\[Omega]", "4"]}]]}], TraditionalForm], 
     "errors" -> {}, "input" -> 
     "\\left<\\left|\\hat{\\Delta}_{p_1}\\right|^2\\right> = \\frac{c_1^2 \
q_{l_2}^2+q_{l_1}^2\\left(\\gamma_{p}^2+ \\omega^2\\right)}{\\left(c_1 c_2+ \
\\gamma_{p}^2\\right)^2+2\\left(\\gamma_{p}^2-c_1 c_2 \\right)\\omega^2+ \
\\omega^4}", "state" -> "Boxes"],
    "TeXAssistantTemplate"],
   TraditionalForm]}]], "Text",
 CellChangeTimes->{{3.8440053920709305`*^9, 3.8440054085918975`*^9}, {
  3.8440060616721954`*^9, 3.8440060842009983`*^9}, {3.8440063111705604`*^9, 
  3.8440063198006363`*^9}, {3.844006568353899*^9, 
  3.844006568994482*^9}},ExpressionUUID->"5793c44e-f060-445b-ab8c-\
e7c89389c43f"],

Cell["Es decir, tendremos", "Text",
 CellChangeTimes->{{3.844006315520442*^9, 
  3.844006324429393*^9}},ExpressionUUID->"1b06e08d-5a44-4f11-a7d9-\
ee6034db15cb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReplaceAll", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{
      SuperscriptBox["ql1", "2"], " ", "\[Xi]l1", " ", 
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["\[Gamma]p", "2"], "+", 
        SuperscriptBox["\[Omega]", "2"]}], ")"}], " ", 
      SuperscriptBox["\[Xi]l1", "\[Prime]",
       MultilineFunction->None]}], "+", 
     RowBox[{
      SuperscriptBox["c1", "2"], " ", 
      SuperscriptBox["ql2", "2"], " ", "\[Xi]l2", " ", 
      SuperscriptBox["\[Xi]l2", "\[Prime]",
       MultilineFunction->None]}]}], 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"c1", " ", "c2"}], "+", 
        SuperscriptBox["\[Gamma]p", "2"]}], ")"}], "2"], "+", 
     RowBox[{"2", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "c1"}], " ", "c2"}], "+", 
        SuperscriptBox["\[Gamma]p", "2"]}], ")"}], " ", 
      SuperscriptBox["\[Omega]", "2"]}], "+", 
     SuperscriptBox["\[Omega]", "4"]}]], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Xi]l1", " ", 
       RowBox[{"\[Xi]l1", "'"}]}], " ", "->", "1"}], ",", " ", 
     RowBox[{
      RowBox[{"\[Xi]l2", " ", 
       RowBox[{"\[Xi]l2", "'"}]}], "->", " ", "1"}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8440053938608513`*^9, 3.8440054060154963`*^9}, {
  3.844006073154004*^9, 3.8440060874450245`*^9}, {3.844006327595398*^9, 
  3.844006349272876*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"cadcb32b-fefd-4fe4-8e40-29d4bb9a9bc1"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{
    SuperscriptBox["c1", "2"], " ", 
    SuperscriptBox["ql2", "2"]}], "+", 
   RowBox[{
    SuperscriptBox["ql1", "2"], " ", 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["\[Gamma]p", "2"], "+", 
      SuperscriptBox["\[Omega]", "2"]}], ")"}]}]}], 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox["\[Gamma]p", "2"]}], ")"}], "2"], "+", 
   RowBox[{"2", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "c1"}], " ", "c2"}], "+", 
      SuperscriptBox["\[Gamma]p", "2"]}], ")"}], " ", 
    SuperscriptBox["\[Omega]", "2"]}], "+", 
   SuperscriptBox["\[Omega]", "4"]}]]], "Output",
 CellChangeTimes->{{3.844006346869481*^9, 3.844006349812995*^9}, 
   3.8440180457433996`*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"34306587-0786-417e-90a1-b1138010c72b"]
}, Open  ]],

Cell[TextData[{
 "Integraremos por residuos, lo que quiere decir que integraremos\n\n\t\t\t\t\
\t\t\t\t\t\t\t\t\t\t\t\t\t",
 Cell[BoxData[
  FormBox[
   TemplateBox[Association["boxes" -> FormBox[
       RowBox[{
         SubscriptBox["\[ContourIntegral]", 
          StyleBox["C", "TI"]], 
         FractionBox[
          RowBox[{
            SubsuperscriptBox[
             StyleBox["c", "TI"], "1", "2"], 
            SubsuperscriptBox[
             StyleBox["q", "TI"], 
             SubscriptBox[
              StyleBox["l", "TI"], "2"], "2"], "+", 
            SubsuperscriptBox[
             StyleBox["q", "TI"], 
             SubscriptBox[
              StyleBox["l", "TI"], "1"], "2"], 
            RowBox[{"(", 
              RowBox[{
                SubsuperscriptBox["\[Gamma]", 
                 StyleBox["p", "TI"], "2"], "+", 
                SuperscriptBox["\[Omega]", "2"]}], ")"}]}], 
          RowBox[{
            SuperscriptBox[
             RowBox[{"(", 
               RowBox[{
                 SubscriptBox[
                  StyleBox["c", "TI"], "1"], 
                 SubscriptBox[
                  StyleBox["c", "TI"], "2"], "+", 
                 SubsuperscriptBox["\[Gamma]", 
                  StyleBox["p", "TI"], "2"]}], ")"}], "2"], "+", "2", 
            RowBox[{"(", 
              RowBox[{
                SubsuperscriptBox["\[Gamma]", 
                 StyleBox["p", "TI"], "2"], "-", 
                SubscriptBox[
                 StyleBox["c", "TI"], "1"], 
                SubscriptBox[
                 StyleBox["c", "TI"], "2"]}], ")"}], 
            SuperscriptBox["\[Omega]", "2"], "+", 
            SuperscriptBox["\[Omega]", "4"]}]], 
         StyleBox["d", "TI"], "\[Omega]"}], TraditionalForm], "errors" -> {}, 
     "input" -> 
     "\\oint_C \\frac{c_1^2 q_{l_2}^2+q_{l_1}^2\\left(\\gamma_{p}^2+ \
\\omega^2\\right)}{\\left(c_1 c_2+ \
\\gamma_{p}^2\\right)^2+2\\left(\\gamma_{p}^2-c_1 c_2 \\right)\\omega^2+ \
\\omega^4} d\\omega", "state" -> "Boxes"],
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "7e6c7c13-736f-4cc6-98bb-22b3b90a83e8"]
}], "Text",
 CellChangeTimes->{{3.8440063645196877`*^9, 3.8440063961663647`*^9}, {
   3.8440064409942665`*^9, 3.844006441323468*^9}, 3.8440067041740427`*^9, {
   3.8440071139285545`*^9, 
   3.844007116922866*^9}},ExpressionUUID->"f0e52dcd-4f5d-4bf3-8e19-\
b3156cc080e1"],

Cell[TextData[{
 "Primero, verificamos que s\[IAcute] podemos utilizar el teorema del \
residuo. Para esto, reemplazamos ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    TemplateBox[Association["boxes" -> FormBox[
        RowBox[{"\[Omega]", "\[LongEqual]", 
          StyleBox["R", "TI"], 
          SuperscriptBox[
           StyleBox["e", "TI"], 
           RowBox[{
             StyleBox["i", "TI"], "\[Theta]"}]]}], TraditionalForm], 
      "errors" -> {}, "input" -> "\\omega = R e^{i \\theta}", "state" -> 
      "Boxes"],
     "TeXAssistantTemplate"], " "}], TraditionalForm]],ExpressionUUID->
  "b7bc7277-7d28-4649-8d3c-1dd965852404"],
 " donde ",
 Cell[BoxData[
  FormBox[
   TemplateBox[Association["boxes" -> FormBox[
       RowBox[{"\[Theta]", "\[Element]", 
         RowBox[{"[", 
           RowBox[{"0", ",", "\[Pi]"}], "]"}]}], TraditionalForm], 
     "errors" -> {}, "input" -> "\\theta \\in \\left[0,\\pi\\right]", "state" -> 
     "Boxes"],
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "3cdad324-0a8a-469f-bc4e-2dfc902219cf"],
 " y evaluamos el l\[IAcute]mite donde R tiende a infinito."
}], "Text",
 CellChangeTimes->{{3.8440064387573705`*^9, 3.8440064881064444`*^9}, {
  3.844006551092592*^9, 
  3.844006560176011*^9}},ExpressionUUID->"99bb132d-49e4-4dad-9ed9-\
2f9418fba73c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   RowBox[{"ReplaceAll", "[", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{
        SuperscriptBox["c1", "2"], " ", 
        SuperscriptBox["ql2", "2"]}], "+", 
       RowBox[{
        SuperscriptBox["ql1", "2"], " ", 
        RowBox[{"(", 
         RowBox[{
          SuperscriptBox["\[Gamma]p", "2"], "+", 
          SuperscriptBox["\[Omega]", "2"]}], ")"}]}]}], 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"c1", " ", "c2"}], "+", 
          SuperscriptBox["\[Gamma]p", "2"]}], ")"}], "2"], "+", 
       RowBox[{"2", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "c1"}], " ", "c2"}], "+", 
          SuperscriptBox["\[Gamma]p", "2"]}], ")"}], " ", 
        SuperscriptBox["\[Omega]", "2"]}], "+", 
       SuperscriptBox["\[Omega]", "4"]}]], ",", 
     RowBox[{"\[Omega]", "->", 
      RowBox[{"R", " ", 
       RowBox[{"Exp", "[", " ", 
        RowBox[{"\[ImaginaryI]", " ", "\[Theta]"}], "]"}]}]}]}], "]"}], ",", 
   RowBox[{"R", "->", " ", "\[Infinity]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.844006582499158*^9, 3.844006588508181*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"0635eb0c-ee70-47ae-b227-10fb59cbef13"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{{3.844006561892542*^9, 3.8440065889310074`*^9}, 
   3.8440180508947167`*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"cb4c3cbc-bbec-47fe-877c-8fef8428c24c"]
}, Open  ]],

Cell["\<\
El l\[IAcute]mite nos indica que s\[IAcute] podemos aplicarlo de forma que \
hagamos un loop en el plano complejo que se vaya a 0 cuando R tiende a \
infinito. Los polos del integrando ser\[AAcute]n aquellos para los cuales se \
cumpla que\
\>", "Text",
 CellChangeTimes->{{3.8440065990215816`*^9, 3.844006622147493*^9}, {
  3.84400665889535*^9, 
  3.8440066924642625`*^9}},ExpressionUUID->"007d961b-1b50-44dc-9d40-\
3d4ea2d901c0"],

Cell[BoxData[
 RowBox[{"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", 
  TemplateBox[Association["boxes" -> FormBox[
      RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
           RowBox[{
             SubscriptBox[
              StyleBox["c", "TI"], "1"], 
             SubscriptBox[
              StyleBox["c", "TI"], "2"], "+", 
             SubsuperscriptBox["\[Gamma]", 
              StyleBox["p", "TI"], "2"]}], ")"}], "2"], "+", "2", 
        RowBox[{"(", 
          RowBox[{
            SubsuperscriptBox["\[Gamma]", 
             StyleBox["p", "TI"], "2"], "-", 
            SubscriptBox[
             StyleBox["c", "TI"], "1"], 
            SubscriptBox[
             StyleBox["c", "TI"], "2"]}], ")"}], 
        SuperscriptBox["\[Omega]", "2"], "+", 
        SuperscriptBox["\[Omega]", "4"], "\[LongEqual]", "0"}], 
      TraditionalForm], "errors" -> {}, "input" -> 
    "\\left(c_1 c_2+ \\gamma_{p}^2\\right)^2+2\\left(\\gamma_{p}^2-c_1 c_2 \
\\right)\\omega^2+ \\omega^4 = 0", "state" -> "Boxes"],
   "TeXAssistantTemplate"]}]], "Input",
 CellChangeTimes->{{3.8440067087049575`*^9, 3.8440067192326665`*^9}, 
   3.844013173230896*^9},ExpressionUUID->"421a7138-f21f-4997-9287-\
13e61fccb8e5"],

Cell["Calculamos los valores de \[Omega] para esta expresi\[OAcute]n.", "Text",
 CellChangeTimes->{{3.8440067523217096`*^9, 
  3.844006761776802*^9}},ExpressionUUID->"69770ab7-2d1a-447c-83c7-\
74cdfad6ec58"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"polos", " ", "=", " ", 
  RowBox[{"SolveValues", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{"c1", " ", "c2"}], "+", 
         SuperscriptBox["\[Gamma]p", "2"]}], ")"}], "2"], "+", 
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "c1"}], " ", "c2"}], "+", 
         SuperscriptBox["\[Gamma]p", "2"]}], ")"}], " ", 
       SuperscriptBox["\[Omega]", "2"]}], "+", 
      SuperscriptBox["\[Omega]", "4"]}], " ", "==", " ", "0"}], ",", " ", 
    "\[Omega]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.844006764398164*^9, 3.844006774515817*^9}, {
  3.8440074418440113`*^9, 3.8440074443573227`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"656abaa2-7d2b-4b02-b66b-71eb818f7e69"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", 
    SqrtBox[
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "-", 
      RowBox[{"2", " ", "\[ImaginaryI]", " ", 
       SqrtBox["c1"], " ", 
       SqrtBox["c2"], " ", "\[Gamma]p"}], "-", 
      SuperscriptBox["\[Gamma]p", "2"]}]]}], ",", 
   SqrtBox[
    RowBox[{
     RowBox[{"c1", " ", "c2"}], "-", 
     RowBox[{"2", " ", "\[ImaginaryI]", " ", 
      SqrtBox["c1"], " ", 
      SqrtBox["c2"], " ", "\[Gamma]p"}], "-", 
     SuperscriptBox["\[Gamma]p", "2"]}]], ",", 
   RowBox[{"-", 
    SqrtBox[
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      RowBox[{"2", " ", "\[ImaginaryI]", " ", 
       SqrtBox["c1"], " ", 
       SqrtBox["c2"], " ", "\[Gamma]p"}], "-", 
      SuperscriptBox["\[Gamma]p", "2"]}]]}], ",", 
   SqrtBox[
    RowBox[{
     RowBox[{"c1", " ", "c2"}], "+", 
     RowBox[{"2", " ", "\[ImaginaryI]", " ", 
      SqrtBox["c1"], " ", 
      SqrtBox["c2"], " ", "\[Gamma]p"}], "-", 
     SuperscriptBox["\[Gamma]p", "2"]}]]}], "}"}]], "Output",
 CellChangeTimes->{{3.84400676709346*^9, 3.8440067748379617`*^9}, 
   3.8440074449071393`*^9, 3.8440074965357633`*^9, 3.8440173796743536`*^9, 
   3.8440179766014996`*^9, 3.8440180526356387`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"82bf3e50-8fb2-4058-a66d-88d9a9dcb55f"]
}, Open  ]],

Cell[TextData[{
 "Es posible que si los polos toman valore puramente reales se deban hacer \
consideraciones extra a las aplicadas hasta ahora en el teorema del residuo. \
Para ver si este es el caso, evaluamos la condici\[OAcute]n ",
 Cell[BoxData[
  FormBox[
   TemplateBox[Association["boxes" -> FormBox[
       RowBox[{
         SubsuperscriptBox["\[Gamma]", 
          StyleBox["p", "TI"], "2"], "-", 
         SubscriptBox[
          StyleBox["c", "TI"], "1"], 
         SubscriptBox[
          StyleBox["c", "TI"], "2"], ">", "0"}], TraditionalForm], 
     "errors" -> {}, "input" -> "\\gamma_p^2 - c_1 c_2 > 0", "state" -> 
     "Boxes"],
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "2d55d121-ad35-4178-8474-3c94c7a59a63"],
 ". Teniendo en cuenta esta condici\[OAcute]n, asignaremos valores aleatorios \
con distribuci\[OAcute]n normal para las constantes involucradas en los polos \
para ubicarlos en el plano complejo. De aqu\[IAcute] obtenemos el \
gr\[AAcute]fico que se muestra a continuaci\[OAcute]n, "
}], "Text",
 CellChangeTimes->{{3.844006915993601*^9, 3.8440069937196064`*^9}, {
  3.8440070249440765`*^9, 
  3.8440070724929247`*^9}},ExpressionUUID->"7b7c943e-5a6c-4648-8d12-\
a9f98d10e18f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"tryConstantes1", "[", "polo_", "]"}], ":=", 
  RowBox[{"ReplaceAll", "[", 
   RowBox[{"polo", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ql1", "->", 
       RowBox[{"RandomReal", "[", "]"}]}], ",", 
      RowBox[{"ql2", "->", 
       RowBox[{"RandomReal", "[", "]"}]}], ",", 
      RowBox[{"c1", "->", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0.019"}], "}"}], "]"}]}], ",", 
      RowBox[{"c2", "->", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0.019"}], "}"}], "]"}]}], ",", 
      RowBox[{"\[Gamma]p", "->", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"1", "/", "50"}], ",", 
          RowBox[{"1", "/", "18"}]}], "}"}], "]"}]}]}], "}"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ReIm", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"tryConstantes1", "[", 
         RowBox[{"polos", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", "1000"}], "]"}], "]"}], 
     ",", 
     RowBox[{"ReIm", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"tryConstantes1", "[", 
         RowBox[{"polos", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", "1000"}], "]"}], "]"}], 
     ",", 
     RowBox[{"ReIm", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"tryConstantes1", "[", 
         RowBox[{"polos", "[", 
          RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", "1000"}], "]"}], "]"}], 
     ",", 
     RowBox[{"ReIm", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"tryConstantes1", "[", 
         RowBox[{"polos", "[", 
          RowBox[{"[", "4", "]"}], "]"}], "]"}], ",", "1000"}], "]"}], 
      "]"}]}], "}"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.844007076445823*^9, 3.844007108461006*^9}, 
   3.844007447909126*^9},
 CellLabel->"In[9]:=",ExpressionUUID->"013c076a-2ac7-47ed-bac9-d83e8a11edef"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{
        Directive[
         PointSize[0.003666666666666667], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        PointBox[CompressedData["
1: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
xSW2Tw==
         "]]}, {
        Directive[
         PointSize[0.003666666666666667], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        PointBox[CompressedData["
1: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

         "]]}, {
        Directive[
         PointSize[0.003666666666666667], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        PointBox[CompressedData["
1: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
372ZyWP/A40xlB8=
         "]]}, {
        Directive[
         PointSize[0.003666666666666667], 
         RGBColor[0.922526, 0.385626, 0.209179], 
         AbsoluteThickness[1.6]], 
        PointBox[CompressedData["
1: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
EhX/AxsZsIg=
         "]]}}}, {{}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{-0.018777274745759343`, 
      0.018900273071961404`}, {-0.05555013576025658, 0.055497430790238465`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"1", "2", "3", "4"}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.003666666666666667`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.003666666666666667`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.003666666666666667`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.560181`", ",", "0.691569`", ",", "0.194885`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.003666666666666667`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6150173333333333, 0.25708400000000003`, 
                    0.13945266666666667`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.922526`", ",", "0.385626`", ",", "0.209179`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.922526, 0.385626, 0.209179]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.922526, 0.385626, 0.209179], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False", ",", "False", ",", "False"}], 
               "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.8440070875760765`*^9, 3.8440071099354033`*^9}, 
   3.8440074486732497`*^9, 3.8440180565432167`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"b0ae3ff7-bd5f-4656-9161-510d37270801"]
}, Open  ]],

Cell[TextData[{
 "Vemos que, dado que los reales puros se ubicar\[IAcute]an sobre las \
abcisas, no tenemos polos puramente reales si evaluamos la condici\[OAcute]n ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    TemplateBox[Association["boxes" -> FormBox[
        RowBox[{
          SubsuperscriptBox["\[Gamma]", 
           StyleBox["p", "TI"], "2"], "-", 
          SubscriptBox[
           StyleBox["c", "TI"], "1"], 
          SubscriptBox[
           StyleBox["c", "TI"], "2"], ">", "0"}], TraditionalForm], 
      "errors" -> {}, "input" -> "\\gamma_p^2 - c_ 1 c_ 2 > 0", "state" -> 
      "Boxes"],
     "TeXAssistantTemplate"], " "}], TraditionalForm]],ExpressionUUID->
  "5c08c821-046d-43fb-9a4c-c351eadf69c1"],
 ". Por lo que, al menos mientras se cumpla esta condici\[OAcute]n, podemos \
aplicar el teorema del residuo sin incluir consideraciones adicionales. Si, \
en cambio, consideramos que ",
 Cell[BoxData[
  FormBox[
   TemplateBox[Association["boxes" -> FormBox[
       RowBox[{
         SubsuperscriptBox["\[Gamma]", 
          StyleBox["p", "TI"], "2"], "-", 
         SubscriptBox[
          StyleBox["c", "TI"], "1"], 
         SubscriptBox[
          StyleBox["c", "TI"], "2"], "<", "0"}], TraditionalForm], 
     "errors" -> {}, "input" -> "\\gamma_p^2 - c_ 1 c_ 2 < 0", "state" -> 
     "Boxes"],
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "fba865e3-2762-423f-8d47-da59a4270255"],
 " al asignar los valores, tenemos,"
}], "Text",
 CellChangeTimes->{{3.844007138600646*^9, 3.844007259806721*^9}, {
  3.844007315626196*^9, 
  3.8440073531911535`*^9}},ExpressionUUID->"12d19111-40e5-40d0-8c7d-\
ac2b9f7fd5bb"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"tryConstantes2", "[", "polo_", "]"}], ":=", 
  RowBox[{"ReplaceAll", "[", 
   RowBox[{"polo", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ql1", "->", 
       RowBox[{"RandomReal", "[", "]"}]}], ",", 
      RowBox[{"ql2", "->", 
       RowBox[{"RandomReal", "[", "]"}]}], ",", 
      RowBox[{"c1", "->", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "50"}], "}"}], "]"}]}], ",", 
      RowBox[{"c2", "->", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "50"}], "}"}], "]"}]}], ",", 
      RowBox[{"\[Gamma]p", "->", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"1", "/", "50"}], ",", 
          RowBox[{"1", "/", "18"}]}], "}"}], "]"}]}]}], "}"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ReIm", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"tryConstantes2", "[", 
         RowBox[{"polos", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", "1000"}], "]"}], "]"}], 
     ",", 
     RowBox[{"ReIm", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"tryConstantes2", "[", 
         RowBox[{"polos", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", "1000"}], "]"}], "]"}], 
     ",", 
     RowBox[{"ReIm", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"tryConstantes2", "[", 
         RowBox[{"polos", "[", 
          RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", "1000"}], "]"}], "]"}], 
     ",", 
     RowBox[{"ReIm", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"tryConstantes2", "[", 
         RowBox[{"polos", "[", 
          RowBox[{"[", "4", "]"}], "]"}], "]"}], ",", "1000"}], "]"}], 
      "]"}]}], "}"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.84400735996704*^9, 3.8440074003049965`*^9}, 
   3.844007454955385*^9},
 CellLabel->"In[11]:=",ExpressionUUID->"48c0a078-843e-49aa-bd4b-3a4de5721765"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{
        Directive[
         PointSize[0.003666666666666667], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        PointBox[CompressedData["
1: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
IMqHM2Q0wQazax/wuXgS4X87i3U8
         "]]}, {
        Directive[
         PointSize[0.003666666666666667], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        PointBox[CompressedData["
1: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
wmXizZA+DLnDu0OiLAxPUuFibjSAp+6WV+xmmHgx2CRlrMECOO73TPqyfTLr
6ouEv2RhcCwrbkih5WG6a+OGuE5dsC/YJfHYmY5W9LSkpQd6MHJUy8rBgYnq
awuvGOerg2fhs0OPtudhYyNn7Ss1cVjnYvHylGcl7n515MyTZ3aQZTbi/WWM
iEOHjVfZKWtCuKicW4xBKd6/ZdVobasKU0+eTXh2M7A2qv5jUr4JJO3+Ulhj
SkcDnr2lwxOWEMBVMFFwMB8nDoYY1s2pw6Wa6Gvm/Uy863Yw4WGiCsQvxK9P
OEHGOy1LOXItZqDBilVex/azT/NMJ6E+U+BZW6Ljz0/G+TqT/Z5/2P5xc1Gt
0aMaFS482936nyI4jV8/HidXjlhHs769ZAMNDn+2CbqW4yZyo2Wosimbt6wv
D64lYfQht7tS/IZwYaSp0c6Jie6pxsfPCJkA/6v97492ElGotYs2E0gAEm/d
7ZL3LKw5mcVZlKoALu0re2tNiBh7Z2qWxuZllcH7Awz2+R3jt70546wGuXlB
V1MtGZh7SCZCfoctXBQU//Mwj4Xi/1r7/Pp1gX/HtYtGEsVYevrE7yPapqC1
UhyVFVWCN3klv/HIW0GGw6DYG10q6mfL1cmU24AacYn87GIJChMvnOnqsgRp
ryNvl4ZpePfUk3/xDzShW1JgR8IDKi5vvS5YlkOAYwMqvIOsKnwZ5kJi3NKA
5a6rXYojNBT+c+nrp/NGIFOxNDI2VYQeOmu8J1IcYKHZtc6Xg4XHVfa94GXz
6rqkJ2njt1hIOyfeecPNAercTgz5MQrxVMYv/iMjBGBqZRr6jFPwXsChxtMy
BiCe97lmow4T75+bm0gO1YeeQRt9V1Ey/rn64f7QdltIDt52yNasEp/u6VTY
p20Aq7eddN5llY+S4TMPyhTtwEdpCo05q9F5bjQpvdIctn2dF+PbR8cLu/gj
Pc8pQxCn5t+WPzQ8asHaw2PgBHQ/buNXvCzc98v90JCcIjxs+vL0hyAVxd+/
pXds0QTy4xbSYFoxXvt3M0JxmADBoYNdg840TDBT0dc4ZQqUhYm9Q10FyNEc
8/d6mCa8NCmQ+fozH9XDXifslgaw/cBQ/sfmUQndA7jjCUDM3+dH79ygYeR1
+R9bfzkB57kPGt8kGBhNfnk+LEMW6rLj49ZNFCNF4PCK3l1lkBOLnOjYU4C3
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
wp0UHdZsMw3/B4x4iqc=
         "]]}, {
        Directive[
         PointSize[0.003666666666666667], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        PointBox[CompressedData["
1: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
         "]]}, {
        Directive[
         PointSize[0.003666666666666667], 
         RGBColor[0.922526, 0.385626, 0.209179], 
         AbsoluteThickness[1.6]], 
        PointBox[CompressedData["
1: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
bA==
         "]]}}}, {{}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{-49.799773636035475`, 
      48.95231182781068}, {-0.055553358976224654`, 0.055543930411040006`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"1", "2", "3", "4"}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.003666666666666667`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.003666666666666667`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.003666666666666667`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.560181`", ",", "0.691569`", ",", "0.194885`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.003666666666666667`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6150173333333333, 0.25708400000000003`, 
                    0.13945266666666667`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.922526`", ",", "0.385626`", ",", "0.209179`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.922526, 0.385626, 0.209179]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.922526, 0.385626, 0.209179], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False", ",", "False", ",", "False"}], 
               "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.8440074041283517`*^9, 3.8440074557160587`*^9, 3.844007501197276*^9, {
   3.844017368795106*^9, 3.8440173830660877`*^9}, 3.844018060335004*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"660bd497-5516-4843-b59e-94c8ab0f8773"]
}, Open  ]],

Cell["Conociendo los polos podemos calcular los residuos", "Text",
 CellChangeTimes->{{3.8440068537484064`*^9, 3.8440068720706863`*^9}, {
  3.844017387893649*^9, 
  3.8440173886188903`*^9}},ExpressionUUID->"b600c0dd-3b18-4c4f-aa7e-\
018e5c57ffbf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"residuos", " ", "=", " ", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{"polo", " ", "|->", 
     RowBox[{"Residue", "[", 
      RowBox[{
       FractionBox[
        RowBox[{
         RowBox[{
          SuperscriptBox["c1", "2"], " ", 
          SuperscriptBox["ql2", "2"]}], "+", 
         RowBox[{
          SuperscriptBox["ql1", "2"], " ", 
          RowBox[{"(", 
           RowBox[{
            SuperscriptBox["\[Gamma]p", "2"], "+", 
            SuperscriptBox["\[Omega]", "2"]}], ")"}]}]}], 
        RowBox[{
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"c1", " ", "c2"}], "+", 
            SuperscriptBox["\[Gamma]p", "2"]}], ")"}], "2"], "+", 
         RowBox[{"2", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "c1"}], " ", "c2"}], "+", 
            SuperscriptBox["\[Gamma]p", "2"]}], ")"}], " ", 
          SuperscriptBox["\[Omega]", "2"]}], "+", 
         SuperscriptBox["\[Omega]", "4"]}]], ",", 
       RowBox[{"{", 
        RowBox[{"\[Omega]", ",", "polo"}], "}"}]}], "]"}]}], ",", "polos"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{
  3.844006877748828*^9, {3.8440075749721394`*^9, 3.8440075809946556`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"d51f294d-616a-40c3-830e-4e6ecef37d7f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", 
    FractionBox[
     RowBox[{"\[ImaginaryI]", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         SqrtBox["c1"], " ", "c2", " ", 
         SuperscriptBox["ql1", "2"]}], "+", 
        RowBox[{
         SuperscriptBox["c1", 
          RowBox[{"3", "/", "2"}]], " ", 
         SuperscriptBox["ql2", "2"]}], "-", 
        RowBox[{"2", " ", "\[ImaginaryI]", " ", 
         SqrtBox["c2"], " ", 
         SuperscriptBox["ql1", "2"], " ", "\[Gamma]p"}]}], ")"}]}], 
     RowBox[{"8", " ", 
      SqrtBox["c2"], " ", 
      SqrtBox[
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           SqrtBox["c1"], " ", 
           SqrtBox["c2"]}], "-", 
          RowBox[{"\[ImaginaryI]", " ", "\[Gamma]p"}]}], ")"}], "2"]], " ", 
      "\[Gamma]p"}]]}], ",", 
   FractionBox[
    RowBox[{
     RowBox[{"\[ImaginaryI]", " ", 
      SqrtBox["c1"], " ", "c2", " ", 
      SuperscriptBox["ql1", "2"]}], "+", 
     RowBox[{"\[ImaginaryI]", " ", 
      SuperscriptBox["c1", 
       RowBox[{"3", "/", "2"}]], " ", 
      SuperscriptBox["ql2", "2"]}], "+", 
     RowBox[{"2", " ", 
      SqrtBox["c2"], " ", 
      SuperscriptBox["ql1", "2"], " ", "\[Gamma]p"}]}], 
    RowBox[{"8", " ", 
     SqrtBox["c2"], " ", 
     SqrtBox[
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          SqrtBox["c1"], " ", 
          SqrtBox["c2"]}], "-", 
         RowBox[{"\[ImaginaryI]", " ", "\[Gamma]p"}]}], ")"}], "2"]], " ", 
     "\[Gamma]p"}]], ",", 
   FractionBox[
    RowBox[{"\[ImaginaryI]", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        SqrtBox["c1"], " ", "c2", " ", 
        SuperscriptBox["ql1", "2"]}], "+", 
       RowBox[{
        SuperscriptBox["c1", 
         RowBox[{"3", "/", "2"}]], " ", 
        SuperscriptBox["ql2", "2"]}], "+", 
       RowBox[{"2", " ", "\[ImaginaryI]", " ", 
        SqrtBox["c2"], " ", 
        SuperscriptBox["ql1", "2"], " ", "\[Gamma]p"}]}], ")"}]}], 
    RowBox[{"8", " ", 
     SqrtBox["c2"], " ", 
     SqrtBox[
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          SqrtBox["c1"], " ", 
          SqrtBox["c2"]}], "+", 
         RowBox[{"\[ImaginaryI]", " ", "\[Gamma]p"}]}], ")"}], "2"]], " ", 
     "\[Gamma]p"}]], ",", 
   FractionBox[
    RowBox[{
     RowBox[{
      RowBox[{"-", "\[ImaginaryI]"}], " ", 
      SqrtBox["c1"], " ", "c2", " ", 
      SuperscriptBox["ql1", "2"]}], "-", 
     RowBox[{"\[ImaginaryI]", " ", 
      SuperscriptBox["c1", 
       RowBox[{"3", "/", "2"}]], " ", 
      SuperscriptBox["ql2", "2"]}], "+", 
     RowBox[{"2", " ", 
      SqrtBox["c2"], " ", 
      SuperscriptBox["ql1", "2"], " ", "\[Gamma]p"}]}], 
    RowBox[{"8", " ", 
     SqrtBox["c2"], " ", 
     SqrtBox[
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          SqrtBox["c1"], " ", 
          SqrtBox["c2"]}], "+", 
         RowBox[{"\[ImaginaryI]", " ", "\[Gamma]p"}]}], ")"}], "2"]], " ", 
     "\[Gamma]p"}]]}], "}"}]], "Output",
 CellChangeTimes->{3.8440068790834923`*^9, 3.8440075832641125`*^9, 
  3.844017391000039*^9, 3.844018064150213*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"17cc69b1-774e-4faf-b493-a96e10e579f6"]
}, Open  ]],

Cell["\<\
De acuerdo con los gr\[AAcute]ficos, los polos que estar\[IAcute]an dentro de \
nuestro loop ser\[IAcute]an el 1 y el 4 y, por ende, los residuos que \
utilizaremos ser\[AAcute]n los asociados a estos dos polos. Entonces, la \
integral vendr\[AAcute] dada por\
\>", "Text",
 CellChangeTimes->{{3.844007763345217*^9, 3.844007815560408*^9}, {
  3.844017392239348*^9, 
  3.84401739290316*^9}},ExpressionUUID->"fc72fa07-e5d8-4f6d-b36e-\
094d6cd822f5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"integral", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"\[ImaginaryI]", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"residuos", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "+", 
      RowBox[{"residuos", "[", 
       RowBox[{"[", "4", "]"}], "]"}]}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.844008493322*^9, 3.844008510521825*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"b2f0014b-7e7d-4eb1-a61e-941fd4d725d8"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{
      SqrtBox["c1"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"c2", " ", 
         SuperscriptBox["ql1", "2"]}], "+", 
        RowBox[{"c1", " ", 
         SuperscriptBox["ql2", "2"]}]}], ")"}]}], "-", 
     RowBox[{"2", " ", "\[ImaginaryI]", " ", 
      SqrtBox["c2"], " ", 
      SuperscriptBox["ql1", "2"], " ", "\[Gamma]p"}]}], 
    SqrtBox[
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         SqrtBox["c1"], " ", 
         SqrtBox["c2"]}], "-", 
        RowBox[{"\[ImaginaryI]", " ", "\[Gamma]p"}]}], ")"}], "2"]]], "+", 
   FractionBox[
    RowBox[{
     RowBox[{
      SqrtBox["c1"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"c2", " ", 
         SuperscriptBox["ql1", "2"]}], "+", 
        RowBox[{"c1", " ", 
         SuperscriptBox["ql2", "2"]}]}], ")"}]}], "+", 
     RowBox[{"2", " ", "\[ImaginaryI]", " ", 
      SqrtBox["c2"], " ", 
      SuperscriptBox["ql1", "2"], " ", "\[Gamma]p"}]}], 
    SqrtBox[
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         SqrtBox["c1"], " ", 
         SqrtBox["c2"]}], "+", 
        RowBox[{"\[ImaginaryI]", " ", "\[Gamma]p"}]}], ")"}], "2"]]]}], 
  RowBox[{"8", " ", 
   SqrtBox["c2"], " ", "\[Gamma]p"}]]], "Output",
 CellChangeTimes->{
  3.844007737002124*^9, 3.8440078198331385`*^9, {3.8440084969921517`*^9, 
   3.8440085107416706`*^9}, 3.844017402254048*^9, 3.8440180681671085`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"2bc21a4c-3ff7-44e7-bcb6-8bbb65da9582"]
}, Open  ]],

Cell[TextData[{
 "Podemos simplificar esta expresi\[OAcute]n. Podemos decir que ",
 Cell[BoxData[
  FormBox[
   TemplateBox[Association["boxes" -> FormBox[
       RowBox[{
         SqrtBox[
          SuperscriptBox[
           RowBox[{"(", 
             RowBox[{
               SqrtBox[
                SubscriptBox[
                 StyleBox["c", "TI"], "1"]], 
               SqrtBox[
                SubscriptBox[
                 StyleBox["c", "TI"], "2"]], "-", 
               StyleBox["i", "TI"], 
               SubscriptBox["\[Gamma]", 
                StyleBox["p", "TI"]]}], ")"}], "2"]], "\[LongEqual]", 
         SqrtBox[
          SubscriptBox[
           StyleBox["c", "TI"], "1"]], 
         SqrtBox[
          SubscriptBox[
           StyleBox["c", "TI"], "2"]], "-", 
         StyleBox["i", "TI"], 
         SubscriptBox["\[Gamma]", 
          StyleBox["p", "TI"]]}], TraditionalForm], "errors" -> {}, "input" -> 
     "\\sqrt{\\left(\\sqrt{c_1}\\sqrt{c_2} - i \\gamma_p\\right)^2} = \
\\sqrt{c_1}\\sqrt{c_2} - i \\gamma_p", "state" -> "Boxes"],
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "bbfad645-99c4-4d21-b4c8-c12938939374"],
 ", pues ",
 Cell[BoxData[
  FormBox[
   TemplateBox[Association["boxes" -> FormBox[
       SqrtBox[
        SubscriptBox[
         StyleBox["c", "TI"], "1"]], TraditionalForm], "errors" -> {}, 
     "input" -> "\\sqrt{c_1}", "state" -> "Boxes"],
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "1c812f27-f1db-4770-9ac7-81bac47afbe9"],
 ", ",
 Cell[BoxData[
  FormBox[
   TemplateBox[Association["boxes" -> FormBox[
       SqrtBox[
        SubscriptBox[
         StyleBox["c", "TI"], "2"]], TraditionalForm], "errors" -> {}, 
     "input" -> "\\sqrt{c_2}", "state" -> "Boxes"],
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "b1d1f66e-5b53-4caa-bd3d-67dc3691685c"],
 " y ",
 Cell[BoxData[
  FormBox[
   TemplateBox[Association["boxes" -> FormBox[
       SubscriptBox["\[Gamma]", 
        StyleBox["p", "TI"]], TraditionalForm], "errors" -> {}, "input" -> 
     "\\gamma_p", "state" -> "Boxes"],
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "390cbbb7-ea5c-47bf-84b8-cd986db3aed2"],
 " son n\[UAcute]meros positivos. Luego, "
}], "Text",
 CellChangeTimes->{{3.844007841956257*^9, 3.844007877698578*^9}, {
  3.844007910934643*^9, 3.844007912118675*^9}, {3.8440115513680253`*^9, 
  3.8440115593723283`*^9}, {3.844011618913534*^9, 
  3.8440116899260583`*^9}},ExpressionUUID->"eafa81f0-4de5-4d52-a4dc-\
7092a04ba3eb"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{
    FractionBox[
     RowBox[{
      RowBox[{
       SqrtBox["c1"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"c2", " ", 
          SuperscriptBox["ql1", "2"]}], "+", 
         RowBox[{"c1", " ", 
          SuperscriptBox["ql2", "2"]}]}], ")"}]}], "-", 
      RowBox[{"2", " ", "\[ImaginaryI]", " ", 
       SqrtBox["c2"], " ", 
       SuperscriptBox["ql1", "2"], " ", "\[Gamma]p"}]}], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        SqrtBox["c1"], " ", 
        SqrtBox["c2"]}], "-", 
       RowBox[{"\[ImaginaryI]", " ", "\[Gamma]p"}]}], ")"}]], "+", 
    FractionBox[
     RowBox[{
      RowBox[{
       SqrtBox["c1"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"c2", " ", 
          SuperscriptBox["ql1", "2"]}], "+", 
         RowBox[{"c1", " ", 
          SuperscriptBox["ql2", "2"]}]}], ")"}]}], "+", 
      RowBox[{"2", " ", "\[ImaginaryI]", " ", 
       SqrtBox["c2"], " ", 
       SuperscriptBox["ql1", "2"], " ", "\[Gamma]p"}]}], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        SqrtBox["c1"], " ", 
        SqrtBox["c2"]}], "+", 
       RowBox[{"\[ImaginaryI]", " ", "\[Gamma]p"}]}], ")"}]]}], 
   RowBox[{"8", " ", 
    SqrtBox["c2"], " ", "\[Gamma]p"}]], ";"}]], "Input",
 CellChangeTimes->{{3.8440078815781107`*^9, 3.8440078895813537`*^9}, 
   3.844007950775549*^9},
 CellLabel->"In[15]:=",ExpressionUUID->"93360ced-137c-4969-bb2c-390160694c82"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{
    FractionBox[
     RowBox[{
      RowBox[{
       SqrtBox["c1"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"c2", " ", 
          SuperscriptBox["ql1", "2"]}], "+", 
         RowBox[{"c1", " ", 
          SuperscriptBox["ql2", "2"]}]}], ")"}]}], "-", 
      RowBox[{"2", " ", "\[ImaginaryI]", " ", 
       SqrtBox["c2"], " ", 
       SuperscriptBox["ql1", "2"], " ", "\[Gamma]p"}]}], 
     RowBox[{
      RowBox[{
       SqrtBox["c1"], " ", 
       SqrtBox["c2"]}], "-", 
      RowBox[{"\[ImaginaryI]", " ", "\[Gamma]p"}]}]], "+", 
    FractionBox[
     RowBox[{
      RowBox[{
       SqrtBox["c1"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"c2", " ", 
          SuperscriptBox["ql1", "2"]}], "+", 
         RowBox[{"c1", " ", 
          SuperscriptBox["ql2", "2"]}]}], ")"}]}], "+", 
      RowBox[{"2", " ", "\[ImaginaryI]", " ", 
       SqrtBox["c2"], " ", 
       SuperscriptBox["ql1", "2"], " ", "\[Gamma]p"}]}], 
     RowBox[{
      RowBox[{
       SqrtBox["c1"], " ", 
       SqrtBox["c2"]}], "+", 
      RowBox[{"\[ImaginaryI]", " ", "\[Gamma]p"}]}]]}], 
   RowBox[{"8", " ", 
    SqrtBox["c2"], " ", "\[Gamma]p"}]], "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.844007924989127*^9, 3.844007926034708*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"bf883326-dc20-4642-90fa-1ac98178ea01"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"c1", " ", "c2", " ", 
    SuperscriptBox["ql1", "2"]}], "+", 
   RowBox[{
    SuperscriptBox["c1", "2"], " ", 
    SuperscriptBox["ql2", "2"]}], "+", 
   RowBox[{"2", " ", 
    SuperscriptBox["ql1", "2"], " ", 
    SuperscriptBox["\[Gamma]p", "2"]}]}], 
  RowBox[{
   RowBox[{"4", " ", "c1", " ", "c2", " ", "\[Gamma]p"}], "+", 
   RowBox[{"4", " ", 
    SuperscriptBox["\[Gamma]p", "3"]}]}]]], "Output",
 CellChangeTimes->{{3.8440079263586054`*^9, 3.844007953565702*^9}, 
   3.844017407302683*^9, 3.8440180882012873`*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"bb7354b3-cb1f-46cd-9500-0c051c92b16f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    FractionBox[
     RowBox[{
      SuperscriptBox["ql1", "2"], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"c1", " ", "c2"}], " ", "+", 
        RowBox[{"2", "  ", 
         SuperscriptBox["\[Gamma]p", "2"]}]}], ")"}]}], 
     RowBox[{"4", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"c1", " ", "c2", " ", "\[Gamma]p"}], "+", " ", 
        SuperscriptBox["\[Gamma]p", "3"]}], ")"}]}]], "+", " ", 
    FractionBox[
     RowBox[{
      SuperscriptBox["c1", "2"], " ", 
      SuperscriptBox["ql2", "2"]}], 
     RowBox[{"4", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"c1", " ", "c2", " ", "\[Gamma]p"}], "+", 
        RowBox[{"4", " ", "\[Gamma]p"}]}], ")"}]}]]}], ";"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.8440080173191075`*^9, 3.8440080826473427`*^9}, {
  3.8440125690797153`*^9, 3.844012570303011*^9}, {3.8440180906597986`*^9, 
  3.8440180913775425`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"b772679c-afbd-4b0b-b6e0-95c94e972409"],

Cell[BoxData[
 RowBox[{"\t\t\t\t ", 
  TemplateBox[Association["boxes" -> FormBox[
      RowBox[{
        SubsuperscriptBox["\[Sigma]", 
         SubscriptBox[
          StyleBox["p", "TI"], "1"], "2"], "\[LongEqual]", 
        FractionBox["1", 
         RowBox[{"2", "\[Pi]"}]], 
        SubscriptBox["\[ContourIntegral]", 
         StyleBox["C", "TI"]], 
        FractionBox[
         RowBox[{
           SubsuperscriptBox[
            StyleBox["c", "TI"], "1", "2"], 
           SubsuperscriptBox[
            StyleBox["q", "TI"], 
            SubscriptBox[
             StyleBox["l", "TI"], "2"], "2"], "+", 
           SubsuperscriptBox[
            StyleBox["q", "TI"], 
            SubscriptBox[
             StyleBox["l", "TI"], "1"], "2"], 
           RowBox[{"(", 
             RowBox[{
               SubsuperscriptBox["\[Gamma]", 
                StyleBox["p", "TI"], "2"], "+", 
               SuperscriptBox["\[Omega]", "2"]}], ")"}]}], 
         RowBox[{
           SuperscriptBox[
            RowBox[{"(", 
              RowBox[{
                SubscriptBox[
                 StyleBox["c", "TI"], "1"], 
                SubscriptBox[
                 StyleBox["c", "TI"], "2"], "+", 
                SubsuperscriptBox["\[Gamma]", 
                 StyleBox["p", "TI"], "2"]}], ")"}], "2"], "+", "2", 
           RowBox[{"(", 
             RowBox[{
               SubsuperscriptBox["\[Gamma]", 
                StyleBox["p", "TI"], "2"], "-", 
               SubscriptBox[
                StyleBox["c", "TI"], "1"], 
               SubscriptBox[
                StyleBox["c", "TI"], "2"]}], ")"}], 
           SuperscriptBox["\[Omega]", "2"], "+", 
           SuperscriptBox["\[Omega]", "4"]}]], 
        StyleBox["d", "TI"], "\[Omega]", "\[LongEqual]", 
        FractionBox["1", 
         RowBox[{"2", "\[Pi]"}]], 
        SubsuperscriptBox["\[Integral]", 
         RowBox[{"-", "\[Infinity]"}], "\[Infinity]"], 
        FractionBox[
         RowBox[{
           SubsuperscriptBox[
            StyleBox["c", "TI"], "1", "2"], 
           SubsuperscriptBox[
            StyleBox["q", "TI"], 
            SubscriptBox[
             StyleBox["l", "TI"], "2"], "2"], "+", 
           SubsuperscriptBox[
            StyleBox["q", "TI"], 
            SubscriptBox[
             StyleBox["l", "TI"], "1"], "2"], 
           RowBox[{"(", 
             RowBox[{
               SubsuperscriptBox["\[Gamma]", 
                StyleBox["p", "TI"], "2"], "+", 
               SuperscriptBox["\[Omega]", "2"]}], ")"}]}], 
         RowBox[{
           SuperscriptBox[
            RowBox[{"(", 
              RowBox[{
                SubscriptBox[
                 StyleBox["c", "TI"], "1"], 
                SubscriptBox[
                 StyleBox["c", "TI"], "2"], "+", 
                SubsuperscriptBox["\[Gamma]", 
                 StyleBox["p", "TI"], "2"]}], ")"}], "2"], "+", "2", 
           RowBox[{"(", 
             RowBox[{
               SubsuperscriptBox["\[Gamma]", 
                StyleBox["p", "TI"], "2"], "-", 
               SubscriptBox[
                StyleBox["c", "TI"], "1"], 
               SubscriptBox[
                StyleBox["c", "TI"], "2"]}], ")"}], 
           SuperscriptBox["\[Omega]", "2"], "+", 
           SuperscriptBox["\[Omega]", "4"]}]], 
        StyleBox["d", "TI"], "\[Omega]", "\[LongEqual]", 
        FractionBox[
         RowBox[{
           SubsuperscriptBox[
            StyleBox["q", "TI"], 
            SubscriptBox[
             StyleBox["l", "TI"], "1"], "2"], "(", 
           RowBox[{
             SubscriptBox[
              StyleBox["c", "TI"], "1"], 
             SubscriptBox[
              StyleBox["c", "TI"], "2"], "+", "2", 
             SubsuperscriptBox["\[Gamma]", 
              StyleBox["p", "TI"], "2"]}], ")"}], 
         RowBox[{"4", "(", 
           RowBox[{
             SubscriptBox[
              StyleBox["c", "TI"], "1"], 
             SubscriptBox[
              StyleBox["c", "TI"], "2"], 
             SubscriptBox["\[Gamma]", 
              StyleBox["p", "TI"]], "+", 
             SubsuperscriptBox["\[Gamma]", 
              StyleBox["p", "TI"], "3"]}], ")"}]], "+", 
        SubsuperscriptBox[
         StyleBox["c", "TI"], "1", "2"], 
        FractionBox[
         SubsuperscriptBox[
          StyleBox["q", "TI"], 
          SubscriptBox[
           StyleBox["l", "TI"], "2"], "2"], 
         RowBox[{"4", "(", 
           RowBox[{
             SubscriptBox[
              StyleBox["c", "TI"], "1"], 
             SubscriptBox[
              StyleBox["c", "TI"], "2"], 
             SubscriptBox["\[Gamma]", 
              StyleBox["p", "TI"]], "+", "4", 
             SubscriptBox["\[Gamma]", 
              StyleBox["p", "TI"]]}], ")"}]]}], TraditionalForm], 
    "errors" -> {}, "input" -> 
    "\\sigma_{p_1}^2 = \\frac{1}{2\\pi} \\oint_C \\frac{c_1^2 \
q_{l_2}^2+q_{l_1}^2\\left(\\gamma_{p}^2+ \\omega^2\\right)}{\\left(c_1 c_2+ \
\\gamma_{p}^2\\right)^2+2\\left(\\gamma_{p}^2-c_1 c_2 \\right)\\omega^2+ \
\\omega^4} d\\omega = \\frac{1}{2\\pi} \\int_{-\\infty}^{\\infty}\\frac{c_1^2 \
q_{l_2}^2+q_{l_1}^2\\left(\\gamma_{p}^2+ \\omega^2\\right)}{\\left(c_1 c_2+ \
\\gamma_{p}^2\\right)^2+2\\left(\\gamma_{p}^2-c_1 c_2 \\right)\\omega^2+ \
\\omega^4} d\\omega = \\frac{q_{l_1}^2 \\left(c_1 c_2 + \
2\\gamma_p^2\\right)}{4\\left(c_1 c_2 \\gamma_p + \\gamma_p^3 \\right)} + \
c_1^2\\frac{q_{l_2}^2}{4\\left(c_1 c_2 \\gamma_p + 4\\gamma_p\\right)}", 
    "state" -> "Boxes"],
   "TeXAssistantTemplate"]}]], "Input",
 CellChangeTimes->{{3.8440124122397623`*^9, 3.8440124229885902`*^9}, 
   3.844012580689702*^9, {3.84401267158399*^9, 
   3.844012673465992*^9}},ExpressionUUID->"e5f41940-19dd-4e7a-9b40-\
005ed8c7d1d6"],

Cell[CellGroupData[{

Cell["Para B.", "Subsubsection",
 CellChangeTimes->{{3.844008326350279*^9, 3.8440083269147615`*^9}, {
  3.8440126964749064`*^9, 
  3.8440127253728247`*^9}},ExpressionUUID->"63df2ee4-317c-46f8-b053-\
18708427af33"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p3", " ", "=", " ", 
  RowBox[{"Expand", "[", 
   FractionBox[
    RowBox[{
     RowBox[{
      RowBox[{"-", "c2"}], " ", "ql1", " ", "\[Xi]l1"}], "+", 
     RowBox[{"ql2", " ", "\[Xi]l2", " ", 
      RowBox[{"(", 
       RowBox[{"\[Gamma]p", "+", 
        RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]}], 
    RowBox[{
     RowBox[{"c1", " ", "c2"}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"\[Gamma]p", "+", 
        RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"\[Gamma]p", "+", 
        RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]}]], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8440127674364862`*^9, 3.844012780653638*^9}, {
  3.8440128564562173`*^9, 3.844012861870541*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"2c1f6659-7a69-4df7-8ae8-24d4b79bc6e0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox[
    RowBox[{"c2", " ", "ql1", " ", "\[Xi]l1"}], 
    RowBox[{
     RowBox[{"c1", " ", "c2"}], "+", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"\[Gamma]p", "+", 
        RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}]]}], "+", 
  FractionBox[
   RowBox[{"ql2", " ", "\[Gamma]p", " ", "\[Xi]l2"}], 
   RowBox[{
    RowBox[{"c1", " ", "c2"}], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"\[Gamma]p", "+", 
       RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}]], "+", 
  FractionBox[
   RowBox[{"\[ImaginaryI]", " ", "ql2", " ", "\[Xi]l2", " ", "\[Omega]"}], 
   RowBox[{
    RowBox[{"c1", " ", "c2"}], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"\[Gamma]p", "+", 
       RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], 
     "2"]}]]}]], "Output",
 CellChangeTimes->{3.8440127832887692`*^9, 3.8440128623833046`*^9, 
  3.8440174430941906`*^9, 3.8440181072957697`*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"580c62db-a03a-448b-be25-b245a9ff1e9e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p4", " ", "=", " ", 
  RowBox[{"Expand", "[", 
   FractionBox[
    RowBox[{
     RowBox[{
      RowBox[{"-", "c2"}], " ", "ql1", " ", 
      RowBox[{"\[Xi]l1", "'"}]}], "+", 
     RowBox[{"ql2", " ", 
      RowBox[{"\[Xi]l2", "'"}], " ", 
      RowBox[{"(", 
       RowBox[{"\[Gamma]p", "-", 
        RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]}], 
    RowBox[{
     RowBox[{"c1", " ", "c2"}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"\[Gamma]p", "-", 
        RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"\[Gamma]p", "-", 
        RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]}]], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8440127849061203`*^9, 3.8440128036294403`*^9}, {
  3.8440128805913725`*^9, 3.844012886261844*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"f0482b85-b671-4d54-bd4a-ac676687ffc4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox[
    RowBox[{"c2", " ", "ql1", " ", 
     SuperscriptBox["\[Xi]l1", "\[Prime]",
      MultilineFunction->None]}], 
    RowBox[{
     RowBox[{"c1", " ", "c2"}], "+", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"\[Gamma]p", "-", 
        RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}]]}], "+", 
  FractionBox[
   RowBox[{"ql2", " ", "\[Gamma]p", " ", 
    SuperscriptBox["\[Xi]l2", "\[Prime]",
     MultilineFunction->None]}], 
   RowBox[{
    RowBox[{"c1", " ", "c2"}], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"\[Gamma]p", "-", 
       RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}]], "-", 
  FractionBox[
   RowBox[{"\[ImaginaryI]", " ", "ql2", " ", "\[Omega]", " ", 
    SuperscriptBox["\[Xi]l2", "\[Prime]",
     MultilineFunction->None]}], 
   RowBox[{
    RowBox[{"c1", " ", "c2"}], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"\[Gamma]p", "-", 
       RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], 
     "2"]}]]}]], "Output",
 CellChangeTimes->{3.8440128045973983`*^9, 3.84401288672814*^9, 
  3.8440174451295786`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"26630354-4bb3-4173-8c4d-89bf4f2dc688"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pb", " ", "=", " ", 
  RowBox[{"Expand", "[", 
   RowBox[{"p3", " ", "p4"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8440128103736043`*^9, 3.844012813952033*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"40e6a26b-2bce-482e-823e-09d9f68d495d"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{
    SuperscriptBox["c2", "2"], " ", 
    SuperscriptBox["ql1", "2"], " ", "\[Xi]l1", " ", 
    SuperscriptBox["\[Xi]l1", "\[Prime]",
     MultilineFunction->None]}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "-", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], ")"}], 
    " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "+", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], 
     ")"}]}]], "-", 
  FractionBox[
   RowBox[{
   "c2", " ", "ql1", " ", "ql2", " ", "\[Gamma]p", " ", "\[Xi]l2", " ", 
    SuperscriptBox["\[Xi]l1", "\[Prime]",
     MultilineFunction->None]}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "-", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], ")"}], 
    " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "+", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], 
     ")"}]}]], "-", 
  FractionBox[
   RowBox[{
   "\[ImaginaryI]", " ", "c2", " ", "ql1", " ", "ql2", " ", "\[Xi]l2", " ", 
    "\[Omega]", " ", 
    SuperscriptBox["\[Xi]l1", "\[Prime]",
     MultilineFunction->None]}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "-", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], ")"}], 
    " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "+", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], 
     ")"}]}]], "-", 
  FractionBox[
   RowBox[{
   "c2", " ", "ql1", " ", "ql2", " ", "\[Gamma]p", " ", "\[Xi]l1", " ", 
    SuperscriptBox["\[Xi]l2", "\[Prime]",
     MultilineFunction->None]}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "-", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], ")"}], 
    " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "+", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], 
     ")"}]}]], "+", 
  FractionBox[
   RowBox[{
    SuperscriptBox["ql2", "2"], " ", 
    SuperscriptBox["\[Gamma]p", "2"], " ", "\[Xi]l2", " ", 
    SuperscriptBox["\[Xi]l2", "\[Prime]",
     MultilineFunction->None]}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "-", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], ")"}], 
    " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "+", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], 
     ")"}]}]], "+", 
  FractionBox[
   RowBox[{
   "\[ImaginaryI]", " ", "c2", " ", "ql1", " ", "ql2", " ", "\[Xi]l1", " ", 
    "\[Omega]", " ", 
    SuperscriptBox["\[Xi]l2", "\[Prime]",
     MultilineFunction->None]}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "-", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], ")"}], 
    " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "+", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], 
     ")"}]}]], "+", 
  FractionBox[
   RowBox[{
    SuperscriptBox["ql2", "2"], " ", "\[Xi]l2", " ", 
    SuperscriptBox["\[Omega]", "2"], " ", 
    SuperscriptBox["\[Xi]l2", "\[Prime]",
     MultilineFunction->None]}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "-", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], ")"}], 
    " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[Gamma]p", "+", 
         RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}], "2"]}], 
     ")"}]}]]}]], "Output",
 CellChangeTimes->{3.844012814382722*^9, 3.8440128954289427`*^9, 
  3.844017454326317*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"b0cf8035-fa86-4a51-9b1c-9faca5e18fa0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ReplaceAll", "[", 
   RowBox[{"pb", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"\[Xi]l2", " ", 
        SuperscriptBox["\[Xi]l1", "\[Prime]",
         MultilineFunction->None]}], "->", " ", "0"}], ",", 
      RowBox[{
       RowBox[{"\[Xi]l1", " ", 
        SuperscriptBox["\[Xi]l2", "\[Prime]",
         MultilineFunction->None]}], "->", " ", "0"}]}], "}"}]}], "]"}], "//",
   "FullSimplify"}]], "Input",
 CellChangeTimes->{3.844012836174076*^9},
 CellLabel->"In[4]:=",ExpressionUUID->"1a9539e7-034a-4444-a9eb-b629f812f9fa"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{
    SuperscriptBox["c2", "2"], " ", 
    SuperscriptBox["ql1", "2"], " ", "\[Xi]l1", " ", 
    SuperscriptBox["\[Xi]l1", "\[Prime]",
     MultilineFunction->None]}], "+", 
   RowBox[{
    SuperscriptBox["ql2", "2"], " ", "\[Xi]l2", " ", 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["\[Gamma]p", "2"], "+", 
      SuperscriptBox["\[Omega]", "2"]}], ")"}], " ", 
    SuperscriptBox["\[Xi]l2", "\[Prime]",
     MultilineFunction->None]}]}], 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox["\[Gamma]p", "2"]}], ")"}], "2"], "+", 
   RowBox[{"2", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "c1"}], " ", "c2"}], "+", 
      SuperscriptBox["\[Gamma]p", "2"]}], ")"}], " ", 
    SuperscriptBox["\[Omega]", "2"]}], "+", 
   SuperscriptBox["\[Omega]", "4"]}]]], "Output",
 CellChangeTimes->{3.8440174569160357`*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"97e18090-42b0-4627-8e8e-7b746e681116"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReplaceAll", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{
      SuperscriptBox["c2", "2"], " ", 
      SuperscriptBox["ql1", "2"], " ", "\[Xi]l1", " ", 
      SuperscriptBox["\[Xi]l1", "\[Prime]",
       MultilineFunction->None]}], "+", 
     RowBox[{
      SuperscriptBox["ql2", "2"], " ", "\[Xi]l2", " ", 
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["\[Gamma]p", "2"], "+", 
        SuperscriptBox["\[Omega]", "2"]}], ")"}], " ", 
      SuperscriptBox["\[Xi]l2", "\[Prime]",
       MultilineFunction->None]}]}], 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"c1", " ", "c2"}], "+", 
        SuperscriptBox["\[Gamma]p", "2"]}], ")"}], "2"], "+", 
     RowBox[{"2", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "c1"}], " ", "c2"}], "+", 
        SuperscriptBox["\[Gamma]p", "2"]}], ")"}], " ", 
      SuperscriptBox["\[Omega]", "2"]}], "+", 
     SuperscriptBox["\[Omega]", "4"]}]], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Xi]l1", " ", 
       RowBox[{"\[Xi]l1", "'"}]}], " ", "->", "1"}], ",", " ", 
     RowBox[{
      RowBox[{"\[Xi]l2", " ", 
       RowBox[{"\[Xi]l2", "'"}]}], "->", " ", "1"}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{3.8440129702516737`*^9},
 CellLabel->"In[5]:=",ExpressionUUID->"8c883689-30a5-4052-8433-8012b094ec75"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{
    SuperscriptBox["c2", "2"], " ", 
    SuperscriptBox["ql1", "2"]}], "+", 
   RowBox[{
    SuperscriptBox["ql2", "2"], " ", 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["\[Gamma]p", "2"], "+", 
      SuperscriptBox["\[Omega]", "2"]}], ")"}]}]}], 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", " ", "c2"}], "+", 
      SuperscriptBox["\[Gamma]p", "2"]}], ")"}], "2"], "+", 
   RowBox[{"2", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "c1"}], " ", "c2"}], "+", 
      SuperscriptBox["\[Gamma]p", "2"]}], ")"}], " ", 
    SuperscriptBox["\[Omega]", "2"]}], "+", 
   SuperscriptBox["\[Omega]", "4"]}]]], "Output",
 CellChangeTimes->{3.8440129709485693`*^9, 3.8440174692796106`*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"5141741a-b849-4cc5-805f-65f08c959c8a"]
}, Open  ]],

Cell["\<\
Como esta expresi\[OAcute]n es similar, salvo por el hecho de que los sub\
\[IAcute]ndices est\[AAcute]n intercambiados, se espera que, sin \
p\[EAcute]rdida de generalidad, tengamos que \
\>", "Text",
 CellChangeTimes->{{3.8440132318994713`*^9, 3.844013235685541*^9}, 
   3.8440135347823467`*^9, {3.8440136830905647`*^9, 
   3.8440137130763664`*^9}},ExpressionUUID->"5358642c-abfb-4a20-829e-\
75ff0a6f5159"],

Cell[BoxData[
 RowBox[{"\t\t\t\t", 
  TemplateBox[Association["boxes" -> FormBox[
      RowBox[{
        SubsuperscriptBox["\[Sigma]", 
         SubscriptBox[
          StyleBox["p", "TI"], "2"], "2"], "\[LongEqual]", 
        FractionBox["1", 
         RowBox[{"2", "\[Pi]"}]], 
        SubscriptBox["\[ContourIntegral]", 
         StyleBox["C", "TI"]], 
        FractionBox[
         RowBox[{
           SubsuperscriptBox[
            StyleBox["c", "TI"], "2", "2"], 
           SubsuperscriptBox[
            StyleBox["q", "TI"], 
            SubscriptBox[
             StyleBox["l", "TI"], "1"], "2"], "+", 
           SubsuperscriptBox[
            StyleBox["q", "TI"], 
            SubscriptBox[
             StyleBox["l", "TI"], "2"], "2"], 
           RowBox[{"(", 
             RowBox[{
               SubsuperscriptBox["\[Gamma]", 
                StyleBox["p", "TI"], "2"], "+", 
               SuperscriptBox["\[Omega]", "2"]}], ")"}]}], 
         RowBox[{
           SuperscriptBox[
            RowBox[{"(", 
              RowBox[{
                SubscriptBox[
                 StyleBox["c", "TI"], "1"], 
                SubscriptBox[
                 StyleBox["c", "TI"], "2"], "+", 
                SubsuperscriptBox["\[Gamma]", 
                 StyleBox["p", "TI"], "2"]}], ")"}], "2"], "+", "2", 
           RowBox[{"(", 
             RowBox[{
               SubsuperscriptBox["\[Gamma]", 
                StyleBox["p", "TI"], "2"], "-", 
               SubscriptBox[
                StyleBox["c", "TI"], "1"], 
               SubscriptBox[
                StyleBox["c", "TI"], "2"]}], ")"}], 
           SuperscriptBox["\[Omega]", "2"], "+", 
           SuperscriptBox["\[Omega]", "4"]}]], 
        StyleBox["d", "TI"], "\[Omega]", 
        FractionBox["1", 
         RowBox[{"2", "\[Pi]"}]], 
        SubsuperscriptBox["\[Integral]", 
         RowBox[{"-", "\[Infinity]"}], "\[Infinity]"], 
        FractionBox[
         RowBox[{
           SubsuperscriptBox[
            StyleBox["c", "TI"], "2", "2"], 
           SubsuperscriptBox[
            StyleBox["q", "TI"], 
            SubscriptBox[
             StyleBox["l", "TI"], "1"], "2"], "+", 
           SubsuperscriptBox[
            StyleBox["q", "TI"], 
            SubscriptBox[
             StyleBox["l", "TI"], "2"], "2"], 
           RowBox[{"(", 
             RowBox[{
               SubsuperscriptBox["\[Gamma]", 
                StyleBox["p", "TI"], "2"], "+", 
               SuperscriptBox["\[Omega]", "2"]}], ")"}]}], 
         RowBox[{
           SuperscriptBox[
            RowBox[{"(", 
              RowBox[{
                SubscriptBox[
                 StyleBox["c", "TI"], "1"], 
                SubscriptBox[
                 StyleBox["c", "TI"], "2"], "+", 
                SubsuperscriptBox["\[Gamma]", 
                 StyleBox["p", "TI"], "2"]}], ")"}], "2"], "+", "2", 
           RowBox[{"(", 
             RowBox[{
               SubsuperscriptBox["\[Gamma]", 
                StyleBox["p", "TI"], "2"], "-", 
               SubscriptBox[
                StyleBox["c", "TI"], "1"], 
               SubscriptBox[
                StyleBox["c", "TI"], "2"]}], ")"}], 
           SuperscriptBox["\[Omega]", "2"], "+", 
           SuperscriptBox["\[Omega]", "4"]}]], 
        StyleBox["d", "TI"], "\[Omega]", "\[LongEqual]", 
        FractionBox[
         RowBox[{
           SubsuperscriptBox[
            StyleBox["q", "TI"], 
            SubscriptBox[
             StyleBox["l", "TI"], "2"], "2"], "(", 
           RowBox[{
             SubscriptBox[
              StyleBox["c", "TI"], "1"], 
             SubscriptBox[
              StyleBox["c", "TI"], "2"], "+", "2", 
             SubsuperscriptBox["\[Gamma]", 
              StyleBox["p", "TI"], "2"]}], ")"}], 
         RowBox[{"4", "(", 
           RowBox[{
             SubscriptBox[
              StyleBox["c", "TI"], "1"], 
             SubscriptBox[
              StyleBox["c", "TI"], "2"], 
             SubscriptBox["\[Gamma]", 
              StyleBox["p", "TI"]], "+", 
             SubsuperscriptBox["\[Gamma]", 
              StyleBox["p", "TI"], "3"]}], ")"}]], "+", 
        SubsuperscriptBox[
         StyleBox["c", "TI"], "2", "2"], 
        FractionBox[
         SubsuperscriptBox[
          StyleBox["q", "TI"], 
          SubscriptBox[
           StyleBox["l", "TI"], "1"], "2"], 
         RowBox[{"4", "(", 
           RowBox[{
             SubscriptBox[
              StyleBox["c", "TI"], "1"], 
             SubscriptBox[
              StyleBox["c", "TI"], "2"], 
             SubscriptBox["\[Gamma]", 
              StyleBox["p", "TI"]], "+", "4", 
             SubscriptBox["\[Gamma]", 
              StyleBox["p", "TI"]]}], ")"}]]}], TraditionalForm], 
    "errors" -> {}, "input" -> 
    "\\sigma_{p_2}^2 = \\frac{1}{2\\pi} \\oint_C \\frac{c_2^2 q_{l_1}^2 + \
q_{l_2}^2 \\left(\\gamma_p^2 + \\omega^2\\right)}{\\left(c_1 c_2 + \
\\gamma_p^2\\right)^2 + 2\\left(\\gamma_p^2 - c_1 c_2\\right)\\omega^2 + \
\\omega^4} d\\omega \\frac{1}{2\\pi} \\int_{-\\infty}^{\\infty} \\frac{c_2^2 \
q_{l_1}^2 + q_{l_2}^2 \\left(\\gamma_p^2 + \\omega^2\\right)}{\\left(c_1 c_2 \
+ \\gamma_p^2\\right)^2 + 2\\left(\\gamma_p^2 - c_1 c_2\\right)\\omega^2 + \
\\omega^4} d\\omega = \\frac{q_{l_2}^2 \\left(c_1 c_2 + \
2\\gamma_p^2\\right)}{4\\left(c_1 c_2 \\gamma_p + \\gamma_p^3\\right)} + \
c_2^2 \\frac{q_{l_1}^2}{4\\left(c_1 c_2 \\gamma_p + 4\\gamma_p\\right)}", 
    "state" -> "Boxes"],
   "TeXAssistantTemplate"]}]], "Input",
 CellChangeTimes->{
  3.8440143594537716`*^9, {3.844014511982157*^9, 3.8440145126727023`*^9}, 
   3.844015045467289*^9},ExpressionUUID->"d778c789-76d8-4b20-9dfc-\
2ea07eb12385"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1366, 685},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
FrontEndVersion->"12.3 para Microsoft Windows (64-bit) (May 11, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"9624dca1-209b-4008-9ae3-c0f7f9f1d840"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 195, 3, 98, "Title",ExpressionUUID->"0fd24ee3-b46b-4df3-b199-dbc5dc1d126e"],
Cell[778, 27, 3042, 78, 216, "Text",ExpressionUUID->"077c871b-b9f3-47f7-b4eb-20c967688e2f"],
Cell[3823, 107, 180, 3, 35, "Text",ExpressionUUID->"9481b5f9-3180-4adf-9118-1a165b1d4d5d"],
Cell[CellGroupData[{
Cell[4028, 114, 881, 25, 64, "Input",ExpressionUUID->"dbf00f27-9092-4dd7-9679-6bbcbc29b19a"],
Cell[4912, 141, 1498, 41, 53, "Output",ExpressionUUID->"ee4ed681-9ad6-4188-beb0-e7f74ca04db3"]
}, Open  ]],
Cell[6425, 185, 1139, 31, 38, "Text",ExpressionUUID->"4ac804c4-2f87-484c-9d1d-152189ce37d6"],
Cell[CellGroupData[{
Cell[7589, 220, 189, 3, 54, "Subsection",ExpressionUUID->"53f3f529-fe35-4752-92cb-44bdb0480c73"],
Cell[7781, 225, 1001, 24, 38, "Text",ExpressionUUID->"a66378fd-3f6b-420d-bfe4-dd7b3bc887a4"],
Cell[CellGroupData[{
Cell[8807, 253, 793, 21, 64, "Input",ExpressionUUID->"9ae05650-0ff0-47e4-a1a6-5fdd59f9b11d"],
Cell[9603, 276, 1021, 29, 54, "Output",ExpressionUUID->"6b876006-ed20-4e83-95a2-325c8fe124ac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10661, 310, 837, 23, 64, "Input",ExpressionUUID->"b86ee985-3f66-4731-9a40-7670a7528910"],
Cell[11501, 335, 1208, 35, 55, "Output",ExpressionUUID->"a369b128-44b8-472b-965b-8163737f9790"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12746, 375, 196, 4, 44, "Input",ExpressionUUID->"3983a2d4-b79e-4e30-887e-ecca6b5e174d"],
Cell[12945, 381, 4977, 163, 110, "Output",ExpressionUUID->"5b9a782a-139b-413f-830e-82307d9ffe80"]
}, Open  ]],
Cell[17937, 547, 192, 3, 35, "Text",ExpressionUUID->"54ec25e1-2389-4883-aec6-c87a0c4aaa6c"],
Cell[CellGroupData[{
Cell[18154, 554, 764, 18, 44, "Input",ExpressionUUID->"590904c8-2f51-4036-b65e-ef3472ecf4ee"],
Cell[18921, 574, 1136, 32, 62, "Output",ExpressionUUID->"cc2d60f0-94c7-4fb9-8a68-0d68132eebbc"]
}, Open  ]],
Cell[20072, 609, 1345, 34, 40, "Text",ExpressionUUID->"a700c6b9-c792-469a-8a61-23d75730fddc"],
Cell[21420, 645, 2507, 62, 67, "Text",ExpressionUUID->"5793c44e-f060-445b-ab8c-e7c89389c43f"],
Cell[23930, 709, 161, 3, 35, "Text",ExpressionUUID->"1b06e08d-5a44-4f11-a7d9-ee6034db15cb"],
Cell[CellGroupData[{
Cell[24116, 716, 1535, 44, 74, "Input",ExpressionUUID->"cadcb32b-fefd-4fe4-8e40-29d4bb9a9bc1"],
Cell[25654, 762, 908, 28, 62, "Output",ExpressionUUID->"34306587-0786-417e-90a1-b1138010c72b"]
}, Open  ]],
Cell[26577, 793, 2382, 59, 113, "Text",ExpressionUUID->"f0e52dcd-4f5d-4bf3-8e19-b3156cc080e1"],
Cell[28962, 854, 1314, 33, 37, "Text",ExpressionUUID->"99bb132d-49e4-4dad-9ed9-2f9418fba73c"],
Cell[CellGroupData[{
Cell[30301, 891, 1285, 36, 74, "Input",ExpressionUUID->"0635eb0c-ee70-47ae-b227-10fb59cbef13"],
Cell[31589, 929, 202, 3, 33, "Output",ExpressionUUID->"cb4c3cbc-bbec-47fe-877c-8fef8428c24c"]
}, Open  ]],
Cell[31806, 935, 441, 9, 58, "Text",ExpressionUUID->"007d961b-1b50-44dc-9d40-3d4ea2d901c0"],
Cell[32250, 946, 1206, 29, 33, "Input",ExpressionUUID->"421a7138-f21f-4997-9287-13e61fccb8e5"],
Cell[33459, 977, 207, 3, 35, "Text",ExpressionUUID->"69770ab7-2d1a-447c-83c7-74cdfad6ec58"],
Cell[CellGroupData[{
Cell[33691, 984, 829, 22, 48, "Input",ExpressionUUID->"656abaa2-7d2b-4b02-b66b-71eb818f7e69"],
Cell[34523, 1008, 1302, 36, 42, "Output",ExpressionUUID->"82bf3e50-8fb2-4058-a66d-88d9a9dcb55f"]
}, Open  ]],
Cell[35840, 1047, 1231, 26, 85, "Text",ExpressionUUID->"7b7c943e-5a6c-4648-8d12-a9f98d10e18f"],
Cell[CellGroupData[{
Cell[37096, 1077, 2181, 63, 116, "Input",ExpressionUUID->"013c076a-2ac7-47ed-bac9-d83e8a11edef"],
Cell[39280, 1142, 102907, 1790, 248, "Output",ExpressionUUID->"b0ae3ff7-bd5f-4656-9161-510d37270801"]
}, Open  ]],
Cell[142202, 2935, 1652, 40, 66, "Text",ExpressionUUID->"12d19111-40e5-40d0-8c7d-ac2b9f7fd5bb"],
Cell[CellGroupData[{
Cell[143879, 2979, 2177, 63, 116, "Input",ExpressionUUID->"48c0a078-843e-49aa-bd4b-3a4de5721765"],
Cell[146059, 3044, 103378, 1797, 248, "Output",ExpressionUUID->"660bd497-5516-4843-b59e-94c8ab0f8773"]
}, Open  ]],
Cell[249452, 4844, 247, 4, 35, "Text",ExpressionUUID->"b600c0dd-3b18-4c4f-aa7e-018e5c57ffbf"],
Cell[CellGroupData[{
Cell[249724, 4852, 1326, 37, 74, "Input",ExpressionUUID->"d51f294d-616a-40c3-830e-4e6ecef37d7f"],
Cell[251053, 4891, 3263, 103, 65, "Output",ExpressionUUID->"17cc69b1-774e-4faf-b493-a96e10e579f6"]
}, Open  ]],
Cell[254331, 4997, 457, 9, 58, "Text",ExpressionUUID->"fc72fa07-e5d8-4f6d-b36e-094d6cd822f5"],
Cell[CellGroupData[{
Cell[254813, 5010, 463, 11, 44, "Input",ExpressionUUID->"b2f0014b-7e7d-4eb1-a61e-941fd4d725d8"],
Cell[255279, 5023, 1590, 50, 77, "Output",ExpressionUUID->"2bc21a4c-3ff7-44e7-bcb6-8bbb65da9582"]
}, Open  ]],
Cell[256884, 5076, 2540, 67, 51, "Text",ExpressionUUID->"eafa81f0-4de5-4d52-a4dc-7092a04ba3eb"],
Cell[259427, 5145, 1469, 46, 72, "Input",ExpressionUUID->"93360ced-137c-4969-bb2c-390160694c82"],
Cell[CellGroupData[{
Cell[260921, 5195, 1394, 43, 86, "Input",ExpressionUUID->"bf883326-dc20-4642-90fa-1ac98178ea01"],
Cell[262318, 5240, 652, 17, 57, "Output",ExpressionUUID->"bb7354b3-cb1f-46cd-9500-0c051c92b16f"]
}, Open  ]],
Cell[262985, 5260, 1047, 30, 82, "Input",ExpressionUUID->"b772679c-afbd-4b0b-b6e0-95c94e972409"],
Cell[264035, 5292, 5709, 146, 61, "Input",ExpressionUUID->"e5f41940-19dd-4e7a-9b40-005ed8c7d1d6"],
Cell[CellGroupData[{
Cell[269769, 5442, 213, 4, 45, "Subsubsection",ExpressionUUID->"63df2ee4-317c-46f8-b053-18708427af33"],
Cell[CellGroupData[{
Cell[270007, 5450, 865, 23, 64, "Input",ExpressionUUID->"2c1f6659-7a69-4df7-8ae8-24d4b79bc6e0"],
Cell[270875, 5475, 1072, 30, 54, "Output",ExpressionUUID->"580c62db-a03a-448b-be25-b245a9ff1e9e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[271984, 5510, 910, 25, 64, "Input",ExpressionUUID->"f0482b85-b671-4d54-bd4a-ac676687ffc4"],
Cell[272897, 5537, 1235, 36, 55, "Output",ExpressionUUID->"26630354-4bb3-4173-8c4d-89bf4f2dc688"]
}, Open  ]],
Cell[CellGroupData[{
Cell[274169, 5578, 265, 5, 44, "Input",ExpressionUUID->"40e6a26b-2bce-482e-823e-09d9f68d495d"],
Cell[274437, 5585, 4980, 163, 110, "Output",ExpressionUUID->"b0cf8035-fa86-4a51-9b1c-9faca5e18fa0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[279454, 5753, 585, 16, 44, "Input",ExpressionUUID->"1a9539e7-034a-4444-a9eb-b629f812f9fa"],
Cell[280042, 5771, 1048, 31, 62, "Output",ExpressionUUID->"97e18090-42b0-4627-8e8e-7b746e681116"]
}, Open  ]],
Cell[CellGroupData[{
Cell[281127, 5807, 1409, 42, 74, "Input",ExpressionUUID->"8c883689-30a5-4052-8433-8012b094ec75"],
Cell[282539, 5851, 882, 27, 62, "Output",ExpressionUUID->"5141741a-b849-4cc5-805f-65f08c959c8a"]
}, Open  ]],
Cell[283436, 5881, 418, 8, 35, "Text",ExpressionUUID->"5358642c-abfb-4a20-829e-75ff0a6f5159"],
Cell[283857, 5891, 5673, 146, 61, "Input",ExpressionUUID->"d778c789-76d8-4b20-9dfc-2ea07eb12385"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

